// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mapnik/services.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace telenav {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Context_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Context_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InternetConnectionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_services_2eproto() {
  protobuf_AddDesc_services_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "services.proto");
  GOOGLE_CHECK(file != NULL);
  Context_descriptor_ = file->message_type(0);
  static const int Context_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, application_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, user_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, transaction_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, network_context_),
  };
  Context_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Context_descriptor_,
      Context::default_instance_,
      Context_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Context));
  ApplicationContext_descriptor_ = file->message_type(1);
  static const int ApplicationContext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationContext, application_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationContext, application_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationContext, application_name_),
  };
  ApplicationContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationContext_descriptor_,
      ApplicationContext::default_instance_,
      ApplicationContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationContext));
  UserContext_descriptor_ = file->message_type(2);
  static const int UserContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserContext, secure_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserContext, user_id_),
  };
  UserContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserContext_descriptor_,
      UserContext::default_instance_,
      UserContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserContext));
  TransactionContext_descriptor_ = file->message_type(3);
  static const int TransactionContext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionContext, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionContext, transaction_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionContext, transaction_timestamp_),
  };
  TransactionContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionContext_descriptor_,
      TransactionContext::default_instance_,
      TransactionContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionContext));
  NetworkContext_descriptor_ = file->message_type(4);
  static const int NetworkContext_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkContext, connection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkContext, mobile_carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkContext, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkContext, ip_),
  };
  NetworkContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkContext_descriptor_,
      NetworkContext::default_instance_,
      NetworkContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkContext));
  ServiceStatus_descriptor_ = file->message_type(5);
  static const int ServiceStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, info_link_),
  };
  ServiceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceStatus_descriptor_,
      ServiceStatus::default_instance_,
      ServiceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceStatus));
  ResponseFormat_descriptor_ = file->enum_type(0);
  InternetConnectionType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_services_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Context_descriptor_, &Context::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationContext_descriptor_, &ApplicationContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserContext_descriptor_, &UserContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionContext_descriptor_, &TransactionContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkContext_descriptor_, &NetworkContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceStatus_descriptor_, &ServiceStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_services_2eproto() {
  delete Context::default_instance_;
  delete Context_reflection_;
  delete ApplicationContext::default_instance_;
  delete ApplicationContext_reflection_;
  delete UserContext::default_instance_;
  delete UserContext_reflection_;
  delete TransactionContext::default_instance_;
  delete TransactionContext_reflection_;
  delete NetworkContext::default_instance_;
  delete NetworkContext_reflection_;
  delete ServiceStatus::default_instance_;
  delete ServiceStatus_reflection_;
}

void protobuf_AddDesc_services_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016services.proto\022\021com.telenav.proto\"\203\002\n\007"
    "Context\022B\n\023application_context\030\n \002(\0132%.c"
    "om.telenav.proto.ApplicationContext\0224\n\014u"
    "ser_context\030\024 \001(\0132\036.com.telenav.proto.Us"
    "erContext\022B\n\023transaction_context\030\036 \001(\0132%"
    ".com.telenav.proto.TransactionContext\022:\n"
    "\017network_context\030( \001(\0132!.com.telenav.pro"
    "to.NetworkContext\"e\n\022ApplicationContext\022"
    "\026\n\016application_id\030\n \002(\t\022\035\n\025application_s"
    "ignature\030\024 \002(\t\022\030\n\020application_name\030\036 \002(\t"
    "\"4\n\013UserContext\022\024\n\014secure_token\030\n \002(\t\022\017\n"
    "\007user_id\030\024 \001(\t\"e\n\022TransactionContext\022\026\n\016"
    "transaction_id\030\n \002(\t\022\030\n\020transaction_name"
    "\030\024 \002(\t\022\035\n\025transaction_timestamp\030\036 \002(\004\"\213\001"
    "\n\016NetworkContext\022B\n\017connection_type\030\n \002("
    "\0162).com.telenav.proto.InternetConnection"
    "Type\022\026\n\016mobile_carrier\030\024 \001(\t\022\021\n\tbandwidt"
    "h\030\036 \001(\t\022\n\n\002ip\030( \001(\t\"C\n\rServiceStatus\022\016\n\006"
    "status\030\n \002(\005\022\017\n\007message\030\024 \001(\t\022\021\n\tinfo_li"
    "nk\030\036 \001(\t*>\n\016ResponseFormat\022\010\n\004html\020d\022\t\n\004"
    "json\020\310\001\022\r\n\010protobuf\020\254\002\022\010\n\003xml\020\220\003*=\n\026Inte"
    "rnetConnectionType\022\013\n\007OFFLINE\020\n\022\014\n\010CELLU"
    "LAR\020\013\022\010\n\004WIFI\020\014B2\n\032com.telenav.proto.ser"
    "vicesB\017ServiceProtocolP\001\210\001\001", 947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "services.proto", &protobuf_RegisterTypes);
  Context::default_instance_ = new Context();
  ApplicationContext::default_instance_ = new ApplicationContext();
  UserContext::default_instance_ = new UserContext();
  TransactionContext::default_instance_ = new TransactionContext();
  NetworkContext::default_instance_ = new NetworkContext();
  ServiceStatus::default_instance_ = new ServiceStatus();
  Context::default_instance_->InitAsDefaultInstance();
  ApplicationContext::default_instance_->InitAsDefaultInstance();
  UserContext::default_instance_->InitAsDefaultInstance();
  TransactionContext::default_instance_->InitAsDefaultInstance();
  NetworkContext::default_instance_->InitAsDefaultInstance();
  ServiceStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_services_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_services_2eproto {
  StaticDescriptorInitializer_services_2eproto() {
    protobuf_AddDesc_services_2eproto();
  }
} static_descriptor_initializer_services_2eproto_;
const ::google::protobuf::EnumDescriptor* ResponseFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFormat_descriptor_;
}
bool ResponseFormat_IsValid(int value) {
  switch(value) {
    case 100:
    case 200:
    case 300:
    case 400:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InternetConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternetConnectionType_descriptor_;
}
bool InternetConnectionType_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Context::kApplicationContextFieldNumber;
const int Context::kUserContextFieldNumber;
const int Context::kTransactionContextFieldNumber;
const int Context::kNetworkContextFieldNumber;
#endif  // !_MSC_VER

Context::Context()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Context::InitAsDefaultInstance() {
  application_context_ = const_cast< ::com::telenav::proto::ApplicationContext*>(&::com::telenav::proto::ApplicationContext::default_instance());
  user_context_ = const_cast< ::com::telenav::proto::UserContext*>(&::com::telenav::proto::UserContext::default_instance());
  transaction_context_ = const_cast< ::com::telenav::proto::TransactionContext*>(&::com::telenav::proto::TransactionContext::default_instance());
  network_context_ = const_cast< ::com::telenav::proto::NetworkContext*>(&::com::telenav::proto::NetworkContext::default_instance());
}

Context::Context(const Context& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Context::SharedCtor() {
  _cached_size_ = 0;
  application_context_ = NULL;
  user_context_ = NULL;
  transaction_context_ = NULL;
  network_context_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Context::~Context() {
  SharedDtor();
}

void Context::SharedDtor() {
  if (this != default_instance_) {
    delete application_context_;
    delete user_context_;
    delete transaction_context_;
    delete network_context_;
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_descriptor_;
}

const Context& Context::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

Context* Context::default_instance_ = NULL;

Context* Context::New() const {
  return new Context;
}

void Context::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_application_context()) {
      if (application_context_ != NULL) application_context_->::com::telenav::proto::ApplicationContext::Clear();
    }
    if (has_user_context()) {
      if (user_context_ != NULL) user_context_->::com::telenav::proto::UserContext::Clear();
    }
    if (has_transaction_context()) {
      if (transaction_context_ != NULL) transaction_context_->::com::telenav::proto::TransactionContext::Clear();
    }
    if (has_network_context()) {
      if (network_context_ != NULL) network_context_->::com::telenav::proto::NetworkContext::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.telenav.proto.ApplicationContext application_context = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_user_context;
        break;
      }

      // optional .com.telenav.proto.UserContext user_context = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_transaction_context;
        break;
      }

      // optional .com.telenav.proto.TransactionContext transaction_context = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_network_context;
        break;
      }

      // optional .com.telenav.proto.NetworkContext network_context = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.telenav.proto.ApplicationContext application_context = 10;
  if (has_application_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->application_context(), output);
  }

  // optional .com.telenav.proto.UserContext user_context = 20;
  if (has_user_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->user_context(), output);
  }

  // optional .com.telenav.proto.TransactionContext transaction_context = 30;
  if (has_transaction_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->transaction_context(), output);
  }

  // optional .com.telenav.proto.NetworkContext network_context = 40;
  if (has_network_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->network_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Context::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.telenav.proto.ApplicationContext application_context = 10;
  if (has_application_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->application_context(), target);
  }

  // optional .com.telenav.proto.UserContext user_context = 20;
  if (has_user_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->user_context(), target);
  }

  // optional .com.telenav.proto.TransactionContext transaction_context = 30;
  if (has_transaction_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->transaction_context(), target);
  }

  // optional .com.telenav.proto.NetworkContext network_context = 40;
  if (has_network_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->network_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Context::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.telenav.proto.ApplicationContext application_context = 10;
    if (has_application_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_context());
    }

    // optional .com.telenav.proto.UserContext user_context = 20;
    if (has_user_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_context());
    }

    // optional .com.telenav.proto.TransactionContext transaction_context = 30;
    if (has_transaction_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_context());
    }

    // optional .com.telenav.proto.NetworkContext network_context = 40;
    if (has_network_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Context* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Context*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_context()) {
      mutable_application_context()->::com::telenav::proto::ApplicationContext::MergeFrom(from.application_context());
    }
    if (from.has_user_context()) {
      mutable_user_context()->::com::telenav::proto::UserContext::MergeFrom(from.user_context());
    }
    if (from.has_transaction_context()) {
      mutable_transaction_context()->::com::telenav::proto::TransactionContext::MergeFrom(from.transaction_context());
    }
    if (from.has_network_context()) {
      mutable_network_context()->::com::telenav::proto::NetworkContext::MergeFrom(from.network_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_application_context()) {
    if (!this->application_context().IsInitialized()) return false;
  }
  if (has_user_context()) {
    if (!this->user_context().IsInitialized()) return false;
  }
  if (has_transaction_context()) {
    if (!this->transaction_context().IsInitialized()) return false;
  }
  if (has_network_context()) {
    if (!this->network_context().IsInitialized()) return false;
  }
  return true;
}

void Context::Swap(Context* other) {
  if (other != this) {
    std::swap(application_context_, other->application_context_);
    std::swap(user_context_, other->user_context_);
    std::swap(transaction_context_, other->transaction_context_);
    std::swap(network_context_, other->network_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Context_descriptor_;
  metadata.reflection = Context_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationContext::kApplicationIdFieldNumber;
const int ApplicationContext::kApplicationSignatureFieldNumber;
const int ApplicationContext::kApplicationNameFieldNumber;
#endif  // !_MSC_VER

ApplicationContext::ApplicationContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationContext::InitAsDefaultInstance() {
}

ApplicationContext::ApplicationContext(const ApplicationContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationContext::SharedCtor() {
  _cached_size_ = 0;
  application_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  application_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  application_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationContext::~ApplicationContext() {
  SharedDtor();
}

void ApplicationContext::SharedDtor() {
  if (application_id_ != &::google::protobuf::internal::kEmptyString) {
    delete application_id_;
  }
  if (application_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete application_signature_;
  }
  if (application_name_ != &::google::protobuf::internal::kEmptyString) {
    delete application_name_;
  }
  if (this != default_instance_) {
  }
}

void ApplicationContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationContext_descriptor_;
}

const ApplicationContext& ApplicationContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

ApplicationContext* ApplicationContext::default_instance_ = NULL;

ApplicationContext* ApplicationContext::New() const {
  return new ApplicationContext;
}

void ApplicationContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_application_id()) {
      if (application_id_ != &::google::protobuf::internal::kEmptyString) {
        application_id_->clear();
      }
    }
    if (has_application_signature()) {
      if (application_signature_ != &::google::protobuf::internal::kEmptyString) {
        application_signature_->clear();
      }
    }
    if (has_application_name()) {
      if (application_name_ != &::google::protobuf::internal::kEmptyString) {
        application_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string application_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application_id().data(), this->application_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_application_signature;
        break;
      }

      // required string application_signature = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application_signature().data(), this->application_signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_application_name;
        break;
      }

      // required string application_name = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application_name().data(), this->application_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string application_id = 10;
  if (has_application_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_id().data(), this->application_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->application_id(), output);
  }

  // required string application_signature = 20;
  if (has_application_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_signature().data(), this->application_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->application_signature(), output);
  }

  // required string application_name = 30;
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->application_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string application_id = 10;
  if (has_application_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_id().data(), this->application_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->application_id(), target);
  }

  // required string application_signature = 20;
  if (has_application_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_signature().data(), this->application_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->application_signature(), target);
  }

  // required string application_name = 30;
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->application_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string application_id = 10;
    if (has_application_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_id());
    }

    // required string application_signature = 20;
    if (has_application_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_signature());
    }

    // required string application_name = 30;
    if (has_application_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationContext::MergeFrom(const ApplicationContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_id()) {
      set_application_id(from.application_id());
    }
    if (from.has_application_signature()) {
      set_application_signature(from.application_signature());
    }
    if (from.has_application_name()) {
      set_application_name(from.application_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationContext::CopyFrom(const ApplicationContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ApplicationContext::Swap(ApplicationContext* other) {
  if (other != this) {
    std::swap(application_id_, other->application_id_);
    std::swap(application_signature_, other->application_signature_);
    std::swap(application_name_, other->application_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationContext_descriptor_;
  metadata.reflection = ApplicationContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserContext::kSecureTokenFieldNumber;
const int UserContext::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserContext::UserContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserContext::InitAsDefaultInstance() {
}

UserContext::UserContext(const UserContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserContext::SharedCtor() {
  _cached_size_ = 0;
  secure_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserContext::~UserContext() {
  SharedDtor();
}

void UserContext::SharedDtor() {
  if (secure_token_ != &::google::protobuf::internal::kEmptyString) {
    delete secure_token_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void UserContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserContext_descriptor_;
}

const UserContext& UserContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

UserContext* UserContext::default_instance_ = NULL;

UserContext* UserContext::New() const {
  return new UserContext;
}

void UserContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secure_token()) {
      if (secure_token_ != &::google::protobuf::internal::kEmptyString) {
        secure_token_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secure_token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secure_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secure_token().data(), this->secure_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_user_id;
        break;
      }

      // optional string user_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string secure_token = 10;
  if (has_secure_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secure_token().data(), this->secure_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->secure_token(), output);
  }

  // optional string user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string secure_token = 10;
  if (has_secure_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secure_token().data(), this->secure_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->secure_token(), target);
  }

  // optional string user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secure_token = 10;
    if (has_secure_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secure_token());
    }

    // optional string user_id = 20;
    if (has_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserContext::MergeFrom(const UserContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secure_token()) {
      set_secure_token(from.secure_token());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserContext::CopyFrom(const UserContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserContext::Swap(UserContext* other) {
  if (other != this) {
    std::swap(secure_token_, other->secure_token_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserContext_descriptor_;
  metadata.reflection = UserContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionContext::kTransactionIdFieldNumber;
const int TransactionContext::kTransactionNameFieldNumber;
const int TransactionContext::kTransactionTimestampFieldNumber;
#endif  // !_MSC_VER

TransactionContext::TransactionContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionContext::InitAsDefaultInstance() {
}

TransactionContext::TransactionContext(const TransactionContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionContext::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionContext::~TransactionContext() {
  SharedDtor();
}

void TransactionContext::SharedDtor() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (transaction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_name_;
  }
  if (this != default_instance_) {
  }
}

void TransactionContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionContext_descriptor_;
}

const TransactionContext& TransactionContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

TransactionContext* TransactionContext::default_instance_ = NULL;

TransactionContext* TransactionContext::New() const {
  return new TransactionContext;
}

void TransactionContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
    if (has_transaction_name()) {
      if (transaction_name_ != &::google::protobuf::internal::kEmptyString) {
        transaction_name_->clear();
      }
    }
    transaction_timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string transaction_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_transaction_name;
        break;
      }

      // required string transaction_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transaction_name().data(), this->transaction_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_transaction_timestamp;
        break;
      }

      // required uint64 transaction_timestamp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_timestamp_)));
          set_has_transaction_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string transaction_id = 10;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->transaction_id(), output);
  }

  // required string transaction_name = 20;
  if (has_transaction_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_name().data(), this->transaction_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->transaction_name(), output);
  }

  // required uint64 transaction_timestamp = 30;
  if (has_transaction_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->transaction_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string transaction_id = 10;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->transaction_id(), target);
  }

  // required string transaction_name = 20;
  if (has_transaction_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_name().data(), this->transaction_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->transaction_name(), target);
  }

  // required uint64 transaction_timestamp = 30;
  if (has_transaction_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->transaction_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string transaction_id = 10;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // required string transaction_name = 20;
    if (has_transaction_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_name());
    }

    // required uint64 transaction_timestamp = 30;
    if (has_transaction_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionContext::MergeFrom(const TransactionContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_transaction_name()) {
      set_transaction_name(from.transaction_name());
    }
    if (from.has_transaction_timestamp()) {
      set_transaction_timestamp(from.transaction_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionContext::CopyFrom(const TransactionContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionContext::Swap(TransactionContext* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(transaction_name_, other->transaction_name_);
    std::swap(transaction_timestamp_, other->transaction_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionContext_descriptor_;
  metadata.reflection = TransactionContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkContext::kConnectionTypeFieldNumber;
const int NetworkContext::kMobileCarrierFieldNumber;
const int NetworkContext::kBandwidthFieldNumber;
const int NetworkContext::kIpFieldNumber;
#endif  // !_MSC_VER

NetworkContext::NetworkContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkContext::InitAsDefaultInstance() {
}

NetworkContext::NetworkContext(const NetworkContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkContext::SharedCtor() {
  _cached_size_ = 0;
  connection_type_ = 10;
  mobile_carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bandwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkContext::~NetworkContext() {
  SharedDtor();
}

void NetworkContext::SharedDtor() {
  if (mobile_carrier_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_carrier_;
  }
  if (bandwidth_ != &::google::protobuf::internal::kEmptyString) {
    delete bandwidth_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void NetworkContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkContext_descriptor_;
}

const NetworkContext& NetworkContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

NetworkContext* NetworkContext::default_instance_ = NULL;

NetworkContext* NetworkContext::New() const {
  return new NetworkContext;
}

void NetworkContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_type_ = 10;
    if (has_mobile_carrier()) {
      if (mobile_carrier_ != &::google::protobuf::internal::kEmptyString) {
        mobile_carrier_->clear();
      }
    }
    if (has_bandwidth()) {
      if (bandwidth_ != &::google::protobuf::internal::kEmptyString) {
        bandwidth_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.telenav.proto.InternetConnectionType connection_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::telenav::proto::InternetConnectionType_IsValid(value)) {
            set_connection_type(static_cast< ::com::telenav::proto::InternetConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_mobile_carrier;
        break;
      }

      // optional string mobile_carrier = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_carrier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_carrier().data(), this->mobile_carrier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_bandwidth;
        break;
      }

      // optional string bandwidth = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bandwidth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bandwidth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bandwidth().data(), this->bandwidth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_ip;
        break;
      }

      // optional string ip = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.telenav.proto.InternetConnectionType connection_type = 10;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->connection_type(), output);
  }

  // optional string mobile_carrier = 20;
  if (has_mobile_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_carrier().data(), this->mobile_carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->mobile_carrier(), output);
  }

  // optional string bandwidth = 30;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bandwidth().data(), this->bandwidth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->bandwidth(), output);
  }

  // optional string ip = 40;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.telenav.proto.InternetConnectionType connection_type = 10;
  if (has_connection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->connection_type(), target);
  }

  // optional string mobile_carrier = 20;
  if (has_mobile_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_carrier().data(), this->mobile_carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->mobile_carrier(), target);
  }

  // optional string bandwidth = 30;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bandwidth().data(), this->bandwidth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->bandwidth(), target);
  }

  // optional string ip = 40;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.telenav.proto.InternetConnectionType connection_type = 10;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
    }

    // optional string mobile_carrier = 20;
    if (has_mobile_carrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_carrier());
    }

    // optional string bandwidth = 30;
    if (has_bandwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bandwidth());
    }

    // optional string ip = 40;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkContext::MergeFrom(const NetworkContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_mobile_carrier()) {
      set_mobile_carrier(from.mobile_carrier());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkContext::CopyFrom(const NetworkContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetworkContext::Swap(NetworkContext* other) {
  if (other != this) {
    std::swap(connection_type_, other->connection_type_);
    std::swap(mobile_carrier_, other->mobile_carrier_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkContext_descriptor_;
  metadata.reflection = NetworkContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceStatus::kStatusFieldNumber;
const int ServiceStatus::kMessageFieldNumber;
const int ServiceStatus::kInfoLinkFieldNumber;
#endif  // !_MSC_VER

ServiceStatus::ServiceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceStatus::InitAsDefaultInstance() {
}

ServiceStatus::ServiceStatus(const ServiceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceStatus::~ServiceStatus() {
  SharedDtor();
}

void ServiceStatus::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (info_link_ != &::google::protobuf::internal::kEmptyString) {
    delete info_link_;
  }
  if (this != default_instance_) {
  }
}

void ServiceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceStatus_descriptor_;
}

const ServiceStatus& ServiceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

ServiceStatus* ServiceStatus::default_instance_ = NULL;

ServiceStatus* ServiceStatus::New() const {
  return new ServiceStatus;
}

void ServiceStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_info_link()) {
      if (info_link_ != &::google::protobuf::internal::kEmptyString) {
        info_link_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_message;
        break;
      }

      // optional string message = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_info_link;
        break;
      }

      // optional string info_link = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info_link().data(), this->info_link().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->status(), output);
  }

  // optional string message = 20;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->message(), output);
  }

  // optional string info_link = 30;
  if (has_info_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info_link().data(), this->info_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->info_link(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->status(), target);
  }

  // optional string message = 20;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->message(), target);
  }

  // optional string info_link = 30;
  if (has_info_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info_link().data(), this->info_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->info_link(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string message = 20;
    if (has_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string info_link = 30;
    if (has_info_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_link());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceStatus::MergeFrom(const ServiceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_info_link()) {
      set_info_link(from.info_link());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStatus::CopyFrom(const ServiceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServiceStatus::Swap(ServiceStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(message_, other->message_);
    std::swap(info_link_, other->info_link_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceStatus_descriptor_;
  metadata.reflection = ServiceStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace telenav
}  // namespace com

// @@protoc_insertion_point(global_scope)
