// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "services.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace telenav {
namespace proto {

void protobuf_ShutdownFile_services_2eproto() {
  delete Context::default_instance_;
  delete ApplicationContext::default_instance_;
  delete UserContext::default_instance_;
  delete TransactionContext::default_instance_;
  delete NetworkContext::default_instance_;
  delete ServiceStatus::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_services_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_services_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Context::default_instance_ = new Context();
  ApplicationContext::default_instance_ = new ApplicationContext();
  UserContext::default_instance_ = new UserContext();
  TransactionContext::default_instance_ = new TransactionContext();
  NetworkContext::default_instance_ = new NetworkContext();
  ServiceStatus::default_instance_ = new ServiceStatus();
  Context::default_instance_->InitAsDefaultInstance();
  ApplicationContext::default_instance_->InitAsDefaultInstance();
  UserContext::default_instance_->InitAsDefaultInstance();
  TransactionContext::default_instance_->InitAsDefaultInstance();
  NetworkContext::default_instance_->InitAsDefaultInstance();
  ServiceStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_services_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_services_2eproto_once_);
void protobuf_AddDesc_services_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_services_2eproto_once_,
                 &protobuf_AddDesc_services_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_services_2eproto {
  StaticDescriptorInitializer_services_2eproto() {
    protobuf_AddDesc_services_2eproto();
  }
} static_descriptor_initializer_services_2eproto_;
#endif
bool ResponseFormat_IsValid(int value) {
  switch(value) {
    case 100:
    case 200:
    case 300:
    case 400:
      return true;
    default:
      return false;
  }
}

bool InternetConnectionType_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Context::kApplicationContextFieldNumber;
const int Context::kUserContextFieldNumber;
const int Context::kTransactionContextFieldNumber;
const int Context::kNetworkContextFieldNumber;
#endif  // !_MSC_VER

Context::Context()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Context::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  application_context_ = const_cast< ::com::telenav::proto::ApplicationContext*>(
      ::com::telenav::proto::ApplicationContext::internal_default_instance());
#else
  application_context_ = const_cast< ::com::telenav::proto::ApplicationContext*>(&::com::telenav::proto::ApplicationContext::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_context_ = const_cast< ::com::telenav::proto::UserContext*>(
      ::com::telenav::proto::UserContext::internal_default_instance());
#else
  user_context_ = const_cast< ::com::telenav::proto::UserContext*>(&::com::telenav::proto::UserContext::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transaction_context_ = const_cast< ::com::telenav::proto::TransactionContext*>(
      ::com::telenav::proto::TransactionContext::internal_default_instance());
#else
  transaction_context_ = const_cast< ::com::telenav::proto::TransactionContext*>(&::com::telenav::proto::TransactionContext::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  network_context_ = const_cast< ::com::telenav::proto::NetworkContext*>(
      ::com::telenav::proto::NetworkContext::internal_default_instance());
#else
  network_context_ = const_cast< ::com::telenav::proto::NetworkContext*>(&::com::telenav::proto::NetworkContext::default_instance());
#endif
}

Context::Context(const Context& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Context::SharedCtor() {
  _cached_size_ = 0;
  application_context_ = NULL;
  user_context_ = NULL;
  transaction_context_ = NULL;
  network_context_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Context::~Context() {
  SharedDtor();
}

void Context::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete application_context_;
    delete user_context_;
    delete transaction_context_;
    delete network_context_;
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Context& Context::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_services_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
#endif
  return *default_instance_;
}

Context* Context::default_instance_ = NULL;

Context* Context::New() const {
  return new Context;
}

void Context::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_application_context()) {
      if (application_context_ != NULL) application_context_->::com::telenav::proto::ApplicationContext::Clear();
    }
    if (has_user_context()) {
      if (user_context_ != NULL) user_context_->::com::telenav::proto::UserContext::Clear();
    }
    if (has_transaction_context()) {
      if (transaction_context_ != NULL) transaction_context_->::com::telenav::proto::TransactionContext::Clear();
    }
    if (has_network_context()) {
      if (network_context_ != NULL) network_context_->::com::telenav::proto::NetworkContext::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.telenav.proto.ApplicationContext application_context = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_user_context;
        break;
      }

      // optional .com.telenav.proto.UserContext user_context = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_transaction_context;
        break;
      }

      // optional .com.telenav.proto.TransactionContext transaction_context = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_network_context;
        break;
      }

      // optional .com.telenav.proto.NetworkContext network_context = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.telenav.proto.ApplicationContext application_context = 10;
  if (has_application_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->application_context(), output);
  }

  // optional .com.telenav.proto.UserContext user_context = 20;
  if (has_user_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->user_context(), output);
  }

  // optional .com.telenav.proto.TransactionContext transaction_context = 30;
  if (has_transaction_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->transaction_context(), output);
  }

  // optional .com.telenav.proto.NetworkContext network_context = 40;
  if (has_network_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->network_context(), output);
  }

}

int Context::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.telenav.proto.ApplicationContext application_context = 10;
    if (has_application_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_context());
    }

    // optional .com.telenav.proto.UserContext user_context = 20;
    if (has_user_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_context());
    }

    // optional .com.telenav.proto.TransactionContext transaction_context = 30;
    if (has_transaction_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_context());
    }

    // optional .com.telenav.proto.NetworkContext network_context = 40;
    if (has_network_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_context());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Context*>(&from));
}

void Context::MergeFrom(const Context& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_context()) {
      mutable_application_context()->::com::telenav::proto::ApplicationContext::MergeFrom(from.application_context());
    }
    if (from.has_user_context()) {
      mutable_user_context()->::com::telenav::proto::UserContext::MergeFrom(from.user_context());
    }
    if (from.has_transaction_context()) {
      mutable_transaction_context()->::com::telenav::proto::TransactionContext::MergeFrom(from.transaction_context());
    }
    if (from.has_network_context()) {
      mutable_network_context()->::com::telenav::proto::NetworkContext::MergeFrom(from.network_context());
    }
  }
}

void Context::CopyFrom(const Context& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_application_context()) {
    if (!this->application_context().IsInitialized()) return false;
  }
  if (has_user_context()) {
    if (!this->user_context().IsInitialized()) return false;
  }
  if (has_transaction_context()) {
    if (!this->transaction_context().IsInitialized()) return false;
  }
  if (has_network_context()) {
    if (!this->network_context().IsInitialized()) return false;
  }
  return true;
}

void Context::Swap(Context* other) {
  if (other != this) {
    std::swap(application_context_, other->application_context_);
    std::swap(user_context_, other->user_context_);
    std::swap(transaction_context_, other->transaction_context_);
    std::swap(network_context_, other->network_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Context::GetTypeName() const {
  return "com.telenav.proto.Context";
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationContext::kApplicationIdFieldNumber;
const int ApplicationContext::kApplicationSignatureFieldNumber;
const int ApplicationContext::kApplicationNameFieldNumber;
#endif  // !_MSC_VER

ApplicationContext::ApplicationContext()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApplicationContext::InitAsDefaultInstance() {
}

ApplicationContext::ApplicationContext(const ApplicationContext& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationContext::SharedCtor() {
  _cached_size_ = 0;
  application_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  application_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  application_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationContext::~ApplicationContext() {
  SharedDtor();
}

void ApplicationContext::SharedDtor() {
  if (application_id_ != &::google::protobuf::internal::kEmptyString) {
    delete application_id_;
  }
  if (application_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete application_signature_;
  }
  if (application_name_ != &::google::protobuf::internal::kEmptyString) {
    delete application_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApplicationContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApplicationContext& ApplicationContext::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_services_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
#endif
  return *default_instance_;
}

ApplicationContext* ApplicationContext::default_instance_ = NULL;

ApplicationContext* ApplicationContext::New() const {
  return new ApplicationContext;
}

void ApplicationContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_application_id()) {
      if (application_id_ != &::google::protobuf::internal::kEmptyString) {
        application_id_->clear();
      }
    }
    if (has_application_signature()) {
      if (application_signature_ != &::google::protobuf::internal::kEmptyString) {
        application_signature_->clear();
      }
    }
    if (has_application_name()) {
      if (application_name_ != &::google::protobuf::internal::kEmptyString) {
        application_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApplicationContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string application_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_application_signature;
        break;
      }

      // required string application_signature = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_application_name;
        break;
      }

      // required string application_name = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string application_id = 10;
  if (has_application_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->application_id(), output);
  }

  // required string application_signature = 20;
  if (has_application_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->application_signature(), output);
  }

  // required string application_name = 30;
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->application_name(), output);
  }

}

int ApplicationContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string application_id = 10;
    if (has_application_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_id());
    }

    // required string application_signature = 20;
    if (has_application_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_signature());
    }

    // required string application_name = 30;
    if (has_application_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApplicationContext*>(&from));
}

void ApplicationContext::MergeFrom(const ApplicationContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_id()) {
      set_application_id(from.application_id());
    }
    if (from.has_application_signature()) {
      set_application_signature(from.application_signature());
    }
    if (from.has_application_name()) {
      set_application_name(from.application_name());
    }
  }
}

void ApplicationContext::CopyFrom(const ApplicationContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ApplicationContext::Swap(ApplicationContext* other) {
  if (other != this) {
    std::swap(application_id_, other->application_id_);
    std::swap(application_signature_, other->application_signature_);
    std::swap(application_name_, other->application_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApplicationContext::GetTypeName() const {
  return "com.telenav.proto.ApplicationContext";
}


// ===================================================================

#ifndef _MSC_VER
const int UserContext::kSecureTokenFieldNumber;
const int UserContext::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserContext::UserContext()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserContext::InitAsDefaultInstance() {
}

UserContext::UserContext(const UserContext& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserContext::SharedCtor() {
  _cached_size_ = 0;
  secure_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserContext::~UserContext() {
  SharedDtor();
}

void UserContext::SharedDtor() {
  if (secure_token_ != &::google::protobuf::internal::kEmptyString) {
    delete secure_token_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserContext& UserContext::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_services_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
#endif
  return *default_instance_;
}

UserContext* UserContext::default_instance_ = NULL;

UserContext* UserContext::New() const {
  return new UserContext;
}

void UserContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secure_token()) {
      if (secure_token_ != &::google::protobuf::internal::kEmptyString) {
        secure_token_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secure_token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secure_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_user_id;
        break;
      }

      // optional string user_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string secure_token = 10;
  if (has_secure_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->secure_token(), output);
  }

  // optional string user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->user_id(), output);
  }

}

int UserContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secure_token = 10;
    if (has_secure_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secure_token());
    }

    // optional string user_id = 20;
    if (has_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserContext*>(&from));
}

void UserContext::MergeFrom(const UserContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secure_token()) {
      set_secure_token(from.secure_token());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void UserContext::CopyFrom(const UserContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserContext::Swap(UserContext* other) {
  if (other != this) {
    std::swap(secure_token_, other->secure_token_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserContext::GetTypeName() const {
  return "com.telenav.proto.UserContext";
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionContext::kTransactionIdFieldNumber;
const int TransactionContext::kTransactionNameFieldNumber;
const int TransactionContext::kTransactionTimestampFieldNumber;
#endif  // !_MSC_VER

TransactionContext::TransactionContext()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransactionContext::InitAsDefaultInstance() {
}

TransactionContext::TransactionContext(const TransactionContext& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionContext::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionContext::~TransactionContext() {
  SharedDtor();
}

void TransactionContext::SharedDtor() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (transaction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TransactionContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransactionContext& TransactionContext::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_services_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
#endif
  return *default_instance_;
}

TransactionContext* TransactionContext::default_instance_ = NULL;

TransactionContext* TransactionContext::New() const {
  return new TransactionContext;
}

void TransactionContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
    if (has_transaction_name()) {
      if (transaction_name_ != &::google::protobuf::internal::kEmptyString) {
        transaction_name_->clear();
      }
    }
    transaction_timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransactionContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string transaction_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_transaction_name;
        break;
      }

      // required string transaction_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_transaction_timestamp;
        break;
      }

      // required uint64 transaction_timestamp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_timestamp_)));
          set_has_transaction_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string transaction_id = 10;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->transaction_id(), output);
  }

  // required string transaction_name = 20;
  if (has_transaction_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->transaction_name(), output);
  }

  // required uint64 transaction_timestamp = 30;
  if (has_transaction_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->transaction_timestamp(), output);
  }

}

int TransactionContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string transaction_id = 10;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // required string transaction_name = 20;
    if (has_transaction_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_name());
    }

    // required uint64 transaction_timestamp = 30;
    if (has_transaction_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionContext*>(&from));
}

void TransactionContext::MergeFrom(const TransactionContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_transaction_name()) {
      set_transaction_name(from.transaction_name());
    }
    if (from.has_transaction_timestamp()) {
      set_transaction_timestamp(from.transaction_timestamp());
    }
  }
}

void TransactionContext::CopyFrom(const TransactionContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionContext::Swap(TransactionContext* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(transaction_name_, other->transaction_name_);
    std::swap(transaction_timestamp_, other->transaction_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransactionContext::GetTypeName() const {
  return "com.telenav.proto.TransactionContext";
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkContext::kConnectionTypeFieldNumber;
const int NetworkContext::kMobileCarrierFieldNumber;
const int NetworkContext::kBandwidthFieldNumber;
const int NetworkContext::kIpFieldNumber;
#endif  // !_MSC_VER

NetworkContext::NetworkContext()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NetworkContext::InitAsDefaultInstance() {
}

NetworkContext::NetworkContext(const NetworkContext& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkContext::SharedCtor() {
  _cached_size_ = 0;
  connection_type_ = 10;
  mobile_carrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bandwidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkContext::~NetworkContext() {
  SharedDtor();
}

void NetworkContext::SharedDtor() {
  if (mobile_carrier_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_carrier_;
  }
  if (bandwidth_ != &::google::protobuf::internal::kEmptyString) {
    delete bandwidth_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NetworkContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkContext& NetworkContext::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_services_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
#endif
  return *default_instance_;
}

NetworkContext* NetworkContext::default_instance_ = NULL;

NetworkContext* NetworkContext::New() const {
  return new NetworkContext;
}

void NetworkContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_type_ = 10;
    if (has_mobile_carrier()) {
      if (mobile_carrier_ != &::google::protobuf::internal::kEmptyString) {
        mobile_carrier_->clear();
      }
    }
    if (has_bandwidth()) {
      if (bandwidth_ != &::google::protobuf::internal::kEmptyString) {
        bandwidth_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NetworkContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.telenav.proto.InternetConnectionType connection_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::telenav::proto::InternetConnectionType_IsValid(value)) {
            set_connection_type(static_cast< ::com::telenav::proto::InternetConnectionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_mobile_carrier;
        break;
      }

      // optional string mobile_carrier = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_carrier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_bandwidth;
        break;
      }

      // optional string bandwidth = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bandwidth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bandwidth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_ip;
        break;
      }

      // optional string ip = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.telenav.proto.InternetConnectionType connection_type = 10;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->connection_type(), output);
  }

  // optional string mobile_carrier = 20;
  if (has_mobile_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->mobile_carrier(), output);
  }

  // optional string bandwidth = 30;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->bandwidth(), output);
  }

  // optional string ip = 40;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->ip(), output);
  }

}

int NetworkContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.telenav.proto.InternetConnectionType connection_type = 10;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
    }

    // optional string mobile_carrier = 20;
    if (has_mobile_carrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_carrier());
    }

    // optional string bandwidth = 30;
    if (has_bandwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bandwidth());
    }

    // optional string ip = 40;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkContext*>(&from));
}

void NetworkContext::MergeFrom(const NetworkContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_mobile_carrier()) {
      set_mobile_carrier(from.mobile_carrier());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
}

void NetworkContext::CopyFrom(const NetworkContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetworkContext::Swap(NetworkContext* other) {
  if (other != this) {
    std::swap(connection_type_, other->connection_type_);
    std::swap(mobile_carrier_, other->mobile_carrier_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NetworkContext::GetTypeName() const {
  return "com.telenav.proto.NetworkContext";
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceStatus::kStatusFieldNumber;
const int ServiceStatus::kMessageFieldNumber;
const int ServiceStatus::kInfoLinkFieldNumber;
#endif  // !_MSC_VER

ServiceStatus::ServiceStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServiceStatus::InitAsDefaultInstance() {
}

ServiceStatus::ServiceStatus(const ServiceStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceStatus::~ServiceStatus() {
  SharedDtor();
}

void ServiceStatus::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (info_link_ != &::google::protobuf::internal::kEmptyString) {
    delete info_link_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServiceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceStatus& ServiceStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_services_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
#endif
  return *default_instance_;
}

ServiceStatus* ServiceStatus::default_instance_ = NULL;

ServiceStatus* ServiceStatus::New() const {
  return new ServiceStatus;
}

void ServiceStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_info_link()) {
      if (info_link_ != &::google::protobuf::internal::kEmptyString) {
        info_link_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServiceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_message;
        break;
      }

      // optional string message = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_info_link;
        break;
      }

      // optional string info_link = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_link()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->status(), output);
  }

  // optional string message = 20;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->message(), output);
  }

  // optional string info_link = 30;
  if (has_info_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->info_link(), output);
  }

}

int ServiceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string message = 20;
    if (has_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string info_link = 30;
    if (has_info_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info_link());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceStatus*>(&from));
}

void ServiceStatus::MergeFrom(const ServiceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_info_link()) {
      set_info_link(from.info_link());
    }
  }
}

void ServiceStatus::CopyFrom(const ServiceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServiceStatus::Swap(ServiceStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(message_, other->message_);
    std::swap(info_link_, other->info_link_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServiceStatus::GetTypeName() const {
  return "com.telenav.proto.ServiceStatus";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace telenav
}  // namespace com

// @@protoc_insertion_point(global_scope)
