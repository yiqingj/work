// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.traffic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mapnik/map.traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace telenav {
namespace proto {
namespace map {

void protobuf_ShutdownFile_map_2etraffic_2eproto() {
  delete TrafficRequest::default_instance_;
  delete ReportIncidentRequest::default_instance_;
  delete TileId::default_instance_;
  delete TrafficResponse::default_instance_;
  delete TrafficFlow::default_instance_;
  delete TrafficIncident::default_instance_;
  delete TrafficLevelDictionary::default_instance_;
  delete TrafficLevelPair::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_map_2etraffic_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_map_2etraffic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::com::telenav::proto::protobuf_AddDesc_common_2eproto();
  ::com::telenav::proto::protobuf_AddDesc_services_2eproto();
  TrafficRequest::default_instance_ = new TrafficRequest();
  ReportIncidentRequest::default_instance_ = new ReportIncidentRequest();
  TileId::default_instance_ = new TileId();
  TrafficResponse::default_instance_ = new TrafficResponse();
  TrafficFlow::default_instance_ = new TrafficFlow();
  TrafficIncident::default_instance_ = new TrafficIncident();
  TrafficLevelDictionary::default_instance_ = new TrafficLevelDictionary();
  TrafficLevelPair::default_instance_ = new TrafficLevelPair();
  TrafficRequest::default_instance_->InitAsDefaultInstance();
  ReportIncidentRequest::default_instance_->InitAsDefaultInstance();
  TileId::default_instance_->InitAsDefaultInstance();
  TrafficResponse::default_instance_->InitAsDefaultInstance();
  TrafficFlow::default_instance_->InitAsDefaultInstance();
  TrafficIncident::default_instance_->InitAsDefaultInstance();
  TrafficLevelDictionary::default_instance_->InitAsDefaultInstance();
  TrafficLevelPair::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2etraffic_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_map_2etraffic_2eproto_once_);
void protobuf_AddDesc_map_2etraffic_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_map_2etraffic_2eproto_once_,
                 &protobuf_AddDesc_map_2etraffic_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2etraffic_2eproto {
  StaticDescriptorInitializer_map_2etraffic_2eproto() {
    protobuf_AddDesc_map_2etraffic_2eproto();
  }
} static_descriptor_initializer_map_2etraffic_2eproto_;
#endif
bool Severity_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool IncidentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

bool TrafficRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TrafficRequest_Type TrafficRequest::TRAFFIC_IDS;
const TrafficRequest_Type TrafficRequest::TILE_ID;
const TrafficRequest_Type TrafficRequest::Type_MIN;
const TrafficRequest_Type TrafficRequest::Type_MAX;
const int TrafficRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TrafficRequest::kTypeFieldNumber;
const int TrafficRequest::kTrafficIdFieldNumber;
const int TrafficRequest::kTileIdFieldNumber;
const int TrafficRequest::kContextFieldNumber;
const int TrafficRequest::kDataSetFieldNumber;
const int TrafficRequest::kFlowDataSrcFieldNumber;
const int TrafficRequest::kAlertDataSrcFieldNumber;
#endif  // !_MSC_VER

TrafficRequest::TrafficRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrafficRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tile_id_ = const_cast< ::com::telenav::proto::map::TileId*>(
      ::com::telenav::proto::map::TileId::internal_default_instance());
#else
  tile_id_ = const_cast< ::com::telenav::proto::map::TileId*>(&::com::telenav::proto::map::TileId::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  context_ = const_cast< ::com::telenav::proto::Context*>(
      ::com::telenav::proto::Context::internal_default_instance());
#else
  context_ = const_cast< ::com::telenav::proto::Context*>(&::com::telenav::proto::Context::default_instance());
#endif
}

TrafficRequest::TrafficRequest(const TrafficRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  tile_id_ = NULL;
  context_ = NULL;
  data_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flow_data_src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alert_data_src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficRequest::~TrafficRequest() {
  SharedDtor();
}

void TrafficRequest::SharedDtor() {
  if (data_set_ != &::google::protobuf::internal::kEmptyString) {
    delete data_set_;
  }
  if (flow_data_src_ != &::google::protobuf::internal::kEmptyString) {
    delete flow_data_src_;
  }
  if (alert_data_src_ != &::google::protobuf::internal::kEmptyString) {
    delete alert_data_src_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete tile_id_;
    delete context_;
  }
}

void TrafficRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrafficRequest& TrafficRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

TrafficRequest* TrafficRequest::default_instance_ = NULL;

TrafficRequest* TrafficRequest::New() const {
  return new TrafficRequest;
}

void TrafficRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_tile_id()) {
      if (tile_id_ != NULL) tile_id_->::com::telenav::proto::map::TileId::Clear();
    }
    if (has_context()) {
      if (context_ != NULL) context_->::com::telenav::proto::Context::Clear();
    }
    if (has_data_set()) {
      if (data_set_ != &::google::protobuf::internal::kEmptyString) {
        data_set_->clear();
      }
    }
    if (has_flow_data_src()) {
      if (flow_data_src_ != &::google::protobuf::internal::kEmptyString) {
        flow_data_src_->clear();
      }
    }
    if (has_alert_data_src()) {
      if (alert_data_src_ != &::google::protobuf::internal::kEmptyString) {
        alert_data_src_->clear();
      }
    }
  }
  traffic_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrafficRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.telenav.proto.map.TrafficRequest.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::telenav::proto::map::TrafficRequest_Type_IsValid(value)) {
            set_type(static_cast< ::com::telenav::proto::map::TrafficRequest_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_traffic_id;
        break;
      }

      // repeated string traffic_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_traffic_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_traffic_id;
        if (input->ExpectTag(26)) goto parse_tile_id;
        break;
      }

      // optional .com.telenav.proto.map.TileId tile_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tile_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_context;
        break;
      }

      // optional .com.telenav.proto.Context context = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_set;
        break;
      }

      // optional string data_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_flow_data_src;
        break;
      }

      // optional string flow_data_src = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flow_data_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flow_data_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_alert_data_src;
        break;
      }

      // optional string alert_data_src = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert_data_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alert_data_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.telenav.proto.map.TrafficRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string traffic_id = 2;
  for (int i = 0; i < this->traffic_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->traffic_id(i), output);
  }

  // optional .com.telenav.proto.map.TileId tile_id = 3;
  if (has_tile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->tile_id(), output);
  }

  // optional .com.telenav.proto.Context context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->context(), output);
  }

  // optional string data_set = 5;
  if (has_data_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->data_set(), output);
  }

  // optional string flow_data_src = 6;
  if (has_flow_data_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->flow_data_src(), output);
  }

  // optional string alert_data_src = 7;
  if (has_alert_data_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->alert_data_src(), output);
  }

}

int TrafficRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.telenav.proto.map.TrafficRequest.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.telenav.proto.map.TileId tile_id = 3;
    if (has_tile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tile_id());
    }

    // optional .com.telenav.proto.Context context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context());
    }

    // optional string data_set = 5;
    if (has_data_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_set());
    }

    // optional string flow_data_src = 6;
    if (has_flow_data_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flow_data_src());
    }

    // optional string alert_data_src = 7;
    if (has_alert_data_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alert_data_src());
    }

  }
  // repeated string traffic_id = 2;
  total_size += 1 * this->traffic_id_size();
  for (int i = 0; i < this->traffic_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->traffic_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrafficRequest*>(&from));
}

void TrafficRequest::MergeFrom(const TrafficRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  traffic_id_.MergeFrom(from.traffic_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tile_id()) {
      mutable_tile_id()->::com::telenav::proto::map::TileId::MergeFrom(from.tile_id());
    }
    if (from.has_context()) {
      mutable_context()->::com::telenav::proto::Context::MergeFrom(from.context());
    }
    if (from.has_data_set()) {
      set_data_set(from.data_set());
    }
    if (from.has_flow_data_src()) {
      set_flow_data_src(from.flow_data_src());
    }
    if (from.has_alert_data_src()) {
      set_alert_data_src(from.alert_data_src());
    }
  }
}

void TrafficRequest::CopyFrom(const TrafficRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_context()) {
    if (!this->context().IsInitialized()) return false;
  }
  return true;
}

void TrafficRequest::Swap(TrafficRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    traffic_id_.Swap(&other->traffic_id_);
    std::swap(tile_id_, other->tile_id_);
    std::swap(context_, other->context_);
    std::swap(data_set_, other->data_set_);
    std::swap(flow_data_src_, other->flow_data_src_);
    std::swap(alert_data_src_, other->alert_data_src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrafficRequest::GetTypeName() const {
  return "com.telenav.proto.map.TrafficRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ReportIncidentRequest::kContextFieldNumber;
const int ReportIncidentRequest::kUserIdFieldNumber;
const int ReportIncidentRequest::kDataSetFieldNumber;
const int ReportIncidentRequest::kUserHeadingFieldNumber;
const int ReportIncidentRequest::kUserSpeedFieldNumber;
const int ReportIncidentRequest::kTrafficIncidentFieldNumber;
#endif  // !_MSC_VER

ReportIncidentRequest::ReportIncidentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReportIncidentRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  context_ = const_cast< ::com::telenav::proto::Context*>(
      ::com::telenav::proto::Context::internal_default_instance());
#else
  context_ = const_cast< ::com::telenav::proto::Context*>(&::com::telenav::proto::Context::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  traffic_incident_ = const_cast< ::com::telenav::proto::map::TrafficIncident*>(
      ::com::telenav::proto::map::TrafficIncident::internal_default_instance());
#else
  traffic_incident_ = const_cast< ::com::telenav::proto::map::TrafficIncident*>(&::com::telenav::proto::map::TrafficIncident::default_instance());
#endif
}

ReportIncidentRequest::ReportIncidentRequest(const ReportIncidentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReportIncidentRequest::SharedCtor() {
  _cached_size_ = 0;
  context_ = NULL;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_heading_ = 0;
  user_speed_ = 0;
  traffic_incident_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportIncidentRequest::~ReportIncidentRequest() {
  SharedDtor();
}

void ReportIncidentRequest::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (data_set_ != &::google::protobuf::internal::kEmptyString) {
    delete data_set_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete context_;
    delete traffic_incident_;
  }
}

void ReportIncidentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReportIncidentRequest& ReportIncidentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

ReportIncidentRequest* ReportIncidentRequest::default_instance_ = NULL;

ReportIncidentRequest* ReportIncidentRequest::New() const {
  return new ReportIncidentRequest;
}

void ReportIncidentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_context()) {
      if (context_ != NULL) context_->::com::telenav::proto::Context::Clear();
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_data_set()) {
      if (data_set_ != &::google::protobuf::internal::kEmptyString) {
        data_set_->clear();
      }
    }
    user_heading_ = 0;
    user_speed_ = 0;
    if (has_traffic_incident()) {
      if (traffic_incident_ != NULL) traffic_incident_->::com::telenav::proto::map::TrafficIncident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReportIncidentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.telenav.proto.Context context = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_set;
        break;
      }

      // required string data_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_heading;
        break;
      }

      // optional int32 user_heading = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_heading_)));
          set_has_user_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_speed;
        break;
      }

      // optional int32 user_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_speed_)));
          set_has_user_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_traffic_incident;
        break;
      }

      // required .com.telenav.proto.map.TrafficIncident traffic_incident = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_incident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_incident()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportIncidentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.telenav.proto.Context context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->context(), output);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }

  // required string data_set = 3;
  if (has_data_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data_set(), output);
  }

  // optional int32 user_heading = 4;
  if (has_user_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_heading(), output);
  }

  // optional int32 user_speed = 5;
  if (has_user_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_speed(), output);
  }

  // required .com.telenav.proto.map.TrafficIncident traffic_incident = 6;
  if (has_traffic_incident()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->traffic_incident(), output);
  }

}

int ReportIncidentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.telenav.proto.Context context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context());
    }

    // required string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string data_set = 3;
    if (has_data_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_set());
    }

    // optional int32 user_heading = 4;
    if (has_user_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_heading());
    }

    // optional int32 user_speed = 5;
    if (has_user_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_speed());
    }

    // required .com.telenav.proto.map.TrafficIncident traffic_incident = 6;
    if (has_traffic_incident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_incident());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportIncidentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportIncidentRequest*>(&from));
}

void ReportIncidentRequest::MergeFrom(const ReportIncidentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      mutable_context()->::com::telenav::proto::Context::MergeFrom(from.context());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_data_set()) {
      set_data_set(from.data_set());
    }
    if (from.has_user_heading()) {
      set_user_heading(from.user_heading());
    }
    if (from.has_user_speed()) {
      set_user_speed(from.user_speed());
    }
    if (from.has_traffic_incident()) {
      mutable_traffic_incident()->::com::telenav::proto::map::TrafficIncident::MergeFrom(from.traffic_incident());
    }
  }
}

void ReportIncidentRequest::CopyFrom(const ReportIncidentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportIncidentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000026) != 0x00000026) return false;

  if (has_context()) {
    if (!this->context().IsInitialized()) return false;
  }
  if (has_traffic_incident()) {
    if (!this->traffic_incident().IsInitialized()) return false;
  }
  return true;
}

void ReportIncidentRequest::Swap(ReportIncidentRequest* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(user_id_, other->user_id_);
    std::swap(data_set_, other->data_set_);
    std::swap(user_heading_, other->user_heading_);
    std::swap(user_speed_, other->user_speed_);
    std::swap(traffic_incident_, other->traffic_incident_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReportIncidentRequest::GetTypeName() const {
  return "com.telenav.proto.map.ReportIncidentRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int TileId::kXIndexFieldNumber;
const int TileId::kYIndexFieldNumber;
const int TileId::kZoomLevelFieldNumber;
#endif  // !_MSC_VER

TileId::TileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TileId::InitAsDefaultInstance() {
}

TileId::TileId(const TileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TileId::SharedCtor() {
  _cached_size_ = 0;
  x_index_ = 0;
  y_index_ = 0;
  zoom_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileId::~TileId() {
  SharedDtor();
}

void TileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TileId& TileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

TileId* TileId::default_instance_ = NULL;

TileId* TileId::New() const {
  return new TileId;
}

void TileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_index_ = 0;
    y_index_ = 0;
    zoom_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_index_)));
          set_has_x_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y_index;
        break;
      }

      // optional int32 y_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_index_)));
          set_has_y_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zoom_level;
        break;
      }

      // optional int32 zoom_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoom_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoom_level_)));
          set_has_zoom_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x_index = 1;
  if (has_x_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x_index(), output);
  }

  // optional int32 y_index = 2;
  if (has_y_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y_index(), output);
  }

  // optional int32 zoom_level = 3;
  if (has_zoom_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zoom_level(), output);
  }

}

int TileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x_index = 1;
    if (has_x_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_index());
    }

    // optional int32 y_index = 2;
    if (has_y_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_index());
    }

    // optional int32 zoom_level = 3;
    if (has_zoom_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoom_level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TileId*>(&from));
}

void TileId::MergeFrom(const TileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_index()) {
      set_x_index(from.x_index());
    }
    if (from.has_y_index()) {
      set_y_index(from.y_index());
    }
    if (from.has_zoom_level()) {
      set_zoom_level(from.zoom_level());
    }
  }
}

void TileId::CopyFrom(const TileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileId::IsInitialized() const {

  return true;
}

void TileId::Swap(TileId* other) {
  if (other != this) {
    std::swap(x_index_, other->x_index_);
    std::swap(y_index_, other->y_index_);
    std::swap(zoom_level_, other->zoom_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TileId::GetTypeName() const {
  return "com.telenav.proto.map.TileId";
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficResponse::kStatusFieldNumber;
const int TrafficResponse::kTrafficFlowFieldNumber;
const int TrafficResponse::kTrafficIncidentFieldNumber;
const int TrafficResponse::kTileIdFieldNumber;
const int TrafficResponse::kDictionaryFieldNumber;
#endif  // !_MSC_VER

TrafficResponse::TrafficResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrafficResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  status_ = const_cast< ::com::telenav::proto::ServiceStatus*>(
      ::com::telenav::proto::ServiceStatus::internal_default_instance());
#else
  status_ = const_cast< ::com::telenav::proto::ServiceStatus*>(&::com::telenav::proto::ServiceStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tile_id_ = const_cast< ::com::telenav::proto::map::TileId*>(
      ::com::telenav::proto::map::TileId::internal_default_instance());
#else
  tile_id_ = const_cast< ::com::telenav::proto::map::TileId*>(&::com::telenav::proto::map::TileId::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dictionary_ = const_cast< ::com::telenav::proto::map::TrafficLevelDictionary*>(
      ::com::telenav::proto::map::TrafficLevelDictionary::internal_default_instance());
#else
  dictionary_ = const_cast< ::com::telenav::proto::map::TrafficLevelDictionary*>(&::com::telenav::proto::map::TrafficLevelDictionary::default_instance());
#endif
}

TrafficResponse::TrafficResponse(const TrafficResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  tile_id_ = NULL;
  dictionary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficResponse::~TrafficResponse() {
  SharedDtor();
}

void TrafficResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete status_;
    delete tile_id_;
    delete dictionary_;
  }
}

void TrafficResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrafficResponse& TrafficResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

TrafficResponse* TrafficResponse::default_instance_ = NULL;

TrafficResponse* TrafficResponse::New() const {
  return new TrafficResponse;
}

void TrafficResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::com::telenav::proto::ServiceStatus::Clear();
    }
    if (has_tile_id()) {
      if (tile_id_ != NULL) tile_id_->::com::telenav::proto::map::TileId::Clear();
    }
    if (has_dictionary()) {
      if (dictionary_ != NULL) dictionary_->::com::telenav::proto::map::TrafficLevelDictionary::Clear();
    }
  }
  traffic_flow_.Clear();
  traffic_incident_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrafficResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.telenav.proto.ServiceStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_traffic_flow;
        break;
      }

      // repeated .com.telenav.proto.map.TrafficFlow traffic_flow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_flow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_flow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_traffic_flow;
        if (input->ExpectTag(26)) goto parse_traffic_incident;
        break;
      }

      // repeated .com.telenav.proto.map.TrafficIncident traffic_incident = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_incident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_incident()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_traffic_incident;
        if (input->ExpectTag(34)) goto parse_tile_id;
        break;
      }

      // optional .com.telenav.proto.map.TileId tile_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tile_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dictionary;
        break;
      }

      // optional .com.telenav.proto.map.TrafficLevelDictionary dictionary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.telenav.proto.ServiceStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // repeated .com.telenav.proto.map.TrafficFlow traffic_flow = 2;
  for (int i = 0; i < this->traffic_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->traffic_flow(i), output);
  }

  // repeated .com.telenav.proto.map.TrafficIncident traffic_incident = 3;
  for (int i = 0; i < this->traffic_incident_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->traffic_incident(i), output);
  }

  // optional .com.telenav.proto.map.TileId tile_id = 4;
  if (has_tile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->tile_id(), output);
  }

  // optional .com.telenav.proto.map.TrafficLevelDictionary dictionary = 5;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->dictionary(), output);
  }

}

int TrafficResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.telenav.proto.ServiceStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .com.telenav.proto.map.TileId tile_id = 4;
    if (has_tile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tile_id());
    }

    // optional .com.telenav.proto.map.TrafficLevelDictionary dictionary = 5;
    if (has_dictionary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dictionary());
    }

  }
  // repeated .com.telenav.proto.map.TrafficFlow traffic_flow = 2;
  total_size += 1 * this->traffic_flow_size();
  for (int i = 0; i < this->traffic_flow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_flow(i));
  }

  // repeated .com.telenav.proto.map.TrafficIncident traffic_incident = 3;
  total_size += 1 * this->traffic_incident_size();
  for (int i = 0; i < this->traffic_incident_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_incident(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrafficResponse*>(&from));
}

void TrafficResponse::MergeFrom(const TrafficResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  traffic_flow_.MergeFrom(from.traffic_flow_);
  traffic_incident_.MergeFrom(from.traffic_incident_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::com::telenav::proto::ServiceStatus::MergeFrom(from.status());
    }
    if (from.has_tile_id()) {
      mutable_tile_id()->::com::telenav::proto::map::TileId::MergeFrom(from.tile_id());
    }
    if (from.has_dictionary()) {
      mutable_dictionary()->::com::telenav::proto::map::TrafficLevelDictionary::MergeFrom(from.dictionary());
    }
  }
}

void TrafficResponse::CopyFrom(const TrafficResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficResponse::IsInitialized() const {

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < traffic_incident_size(); i++) {
    if (!this->traffic_incident(i).IsInitialized()) return false;
  }
  return true;
}

void TrafficResponse::Swap(TrafficResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    traffic_flow_.Swap(&other->traffic_flow_);
    traffic_incident_.Swap(&other->traffic_incident_);
    std::swap(tile_id_, other->tile_id_);
    std::swap(dictionary_, other->dictionary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrafficResponse::GetTypeName() const {
  return "com.telenav.proto.map.TrafficResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficFlow::kTrafficIdFieldNumber;
const int TrafficFlow::kSpeedInMpsFieldNumber;
const int TrafficFlow::kTrafficLevelFieldNumber;
const int TrafficFlow::kReportTimeFieldNumber;
const int TrafficFlow::kFreeFlowSpeedInMpsFieldNumber;
#endif  // !_MSC_VER

TrafficFlow::TrafficFlow()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrafficFlow::InitAsDefaultInstance() {
}

TrafficFlow::TrafficFlow(const TrafficFlow& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficFlow::SharedCtor() {
  _cached_size_ = 0;
  traffic_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speed_in_mps_ = 0;
  traffic_level_ = 0;
  report_time_ = GOOGLE_LONGLONG(0);
  free_flow_speed_in_mps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficFlow::~TrafficFlow() {
  SharedDtor();
}

void TrafficFlow::SharedDtor() {
  if (traffic_id_ != &::google::protobuf::internal::kEmptyString) {
    delete traffic_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TrafficFlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrafficFlow& TrafficFlow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

TrafficFlow* TrafficFlow::default_instance_ = NULL;

TrafficFlow* TrafficFlow::New() const {
  return new TrafficFlow;
}

void TrafficFlow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_traffic_id()) {
      if (traffic_id_ != &::google::protobuf::internal::kEmptyString) {
        traffic_id_->clear();
      }
    }
    speed_in_mps_ = 0;
    traffic_level_ = 0;
    report_time_ = GOOGLE_LONGLONG(0);
    free_flow_speed_in_mps_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrafficFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string traffic_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_speed_in_mps;
        break;
      }

      // optional double speed_in_mps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed_in_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_in_mps_)));
          set_has_speed_in_mps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_traffic_level;
        break;
      }

      // optional int32 traffic_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traffic_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traffic_level_)));
          set_has_traffic_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_report_time;
        break;
      }

      // optional int64 report_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &report_time_)));
          set_has_report_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_free_flow_speed_in_mps;
        break;
      }

      // optional double free_flow_speed_in_mps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_free_flow_speed_in_mps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &free_flow_speed_in_mps_)));
          set_has_free_flow_speed_in_mps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string traffic_id = 1;
  if (has_traffic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->traffic_id(), output);
  }

  // optional double speed_in_mps = 2;
  if (has_speed_in_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed_in_mps(), output);
  }

  // optional int32 traffic_level = 3;
  if (has_traffic_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->traffic_level(), output);
  }

  // optional int64 report_time = 4;
  if (has_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->report_time(), output);
  }

  // optional double free_flow_speed_in_mps = 5;
  if (has_free_flow_speed_in_mps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->free_flow_speed_in_mps(), output);
  }

}

int TrafficFlow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string traffic_id = 1;
    if (has_traffic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traffic_id());
    }

    // optional double speed_in_mps = 2;
    if (has_speed_in_mps()) {
      total_size += 1 + 8;
    }

    // optional int32 traffic_level = 3;
    if (has_traffic_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traffic_level());
    }

    // optional int64 report_time = 4;
    if (has_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->report_time());
    }

    // optional double free_flow_speed_in_mps = 5;
    if (has_free_flow_speed_in_mps()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficFlow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrafficFlow*>(&from));
}

void TrafficFlow::MergeFrom(const TrafficFlow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_traffic_id()) {
      set_traffic_id(from.traffic_id());
    }
    if (from.has_speed_in_mps()) {
      set_speed_in_mps(from.speed_in_mps());
    }
    if (from.has_traffic_level()) {
      set_traffic_level(from.traffic_level());
    }
    if (from.has_report_time()) {
      set_report_time(from.report_time());
    }
    if (from.has_free_flow_speed_in_mps()) {
      set_free_flow_speed_in_mps(from.free_flow_speed_in_mps());
    }
  }
}

void TrafficFlow::CopyFrom(const TrafficFlow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlow::IsInitialized() const {

  return true;
}

void TrafficFlow::Swap(TrafficFlow* other) {
  if (other != this) {
    std::swap(traffic_id_, other->traffic_id_);
    std::swap(speed_in_mps_, other->speed_in_mps_);
    std::swap(traffic_level_, other->traffic_level_);
    std::swap(report_time_, other->report_time_);
    std::swap(free_flow_speed_in_mps_, other->free_flow_speed_in_mps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrafficFlow::GetTypeName() const {
  return "com.telenav.proto.map.TrafficFlow";
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficIncident::kTrafficIdFieldNumber;
const int TrafficIncident::kIncidentTypeFieldNumber;
const int TrafficIncident::kIncidentSeverityFieldNumber;
const int TrafficIncident::kIncidentLocationFieldNumber;
const int TrafficIncident::kDescriptionFieldNumber;
const int TrafficIncident::kStreetNameFieldNumber;
const int TrafficIncident::kFirstCrossStreetFieldNumber;
const int TrafficIncident::kSecondCrossStreetFieldNumber;
const int TrafficIncident::kEventCodeFieldNumber;
const int TrafficIncident::kEndTimeFieldNumber;
const int TrafficIncident::kSpeedFieldNumber;
const int TrafficIncident::kIsBlockingFieldNumber;
const int TrafficIncident::kEdgeIdFieldNumber;
#endif  // !_MSC_VER

TrafficIncident::TrafficIncident()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrafficIncident::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  incident_location_ = const_cast< ::com::telenav::proto::LatLon*>(
      ::com::telenav::proto::LatLon::internal_default_instance());
#else
  incident_location_ = const_cast< ::com::telenav::proto::LatLon*>(&::com::telenav::proto::LatLon::default_instance());
#endif
}

TrafficIncident::TrafficIncident(const TrafficIncident& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficIncident::SharedCtor() {
  _cached_size_ = 0;
  incident_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  incident_severity_ = -1;
  incident_location_ = NULL;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  first_cross_street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  second_cross_street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_code_ = 0;
  end_time_ = GOOGLE_LONGLONG(0);
  speed_ = 0;
  is_blocking_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficIncident::~TrafficIncident() {
  SharedDtor();
}

void TrafficIncident::SharedDtor() {
  if (incident_type_ != &::google::protobuf::internal::kEmptyString) {
    delete incident_type_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (street_name_ != &::google::protobuf::internal::kEmptyString) {
    delete street_name_;
  }
  if (first_cross_street_ != &::google::protobuf::internal::kEmptyString) {
    delete first_cross_street_;
  }
  if (second_cross_street_ != &::google::protobuf::internal::kEmptyString) {
    delete second_cross_street_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete incident_location_;
  }
}

void TrafficIncident::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrafficIncident& TrafficIncident::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

TrafficIncident* TrafficIncident::default_instance_ = NULL;

TrafficIncident* TrafficIncident::New() const {
  return new TrafficIncident;
}

void TrafficIncident::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_incident_type()) {
      if (incident_type_ != &::google::protobuf::internal::kEmptyString) {
        incident_type_->clear();
      }
    }
    incident_severity_ = -1;
    if (has_incident_location()) {
      if (incident_location_ != NULL) incident_location_->::com::telenav::proto::LatLon::Clear();
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_street_name()) {
      if (street_name_ != &::google::protobuf::internal::kEmptyString) {
        street_name_->clear();
      }
    }
    if (has_first_cross_street()) {
      if (first_cross_street_ != &::google::protobuf::internal::kEmptyString) {
        first_cross_street_->clear();
      }
    }
    if (has_second_cross_street()) {
      if (second_cross_street_ != &::google::protobuf::internal::kEmptyString) {
        second_cross_street_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    event_code_ = 0;
    end_time_ = GOOGLE_LONGLONG(0);
    speed_ = 0;
    is_blocking_ = false;
  }
  traffic_id_.Clear();
  edge_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrafficIncident::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string traffic_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_traffic_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_traffic_id;
        if (input->ExpectTag(18)) goto parse_incident_type;
        break;
      }

      // optional string incident_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_incident_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_incident_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_incident_severity;
        break;
      }

      // optional .com.telenav.proto.map.Severity incident_severity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incident_severity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::telenav::proto::map::Severity_IsValid(value)) {
            set_incident_severity(static_cast< ::com::telenav::proto::map::Severity >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_incident_location;
        break;
      }

      // optional .com.telenav.proto.LatLon incident_location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_incident_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_incident_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_street_name;
        break;
      }

      // optional string street_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_first_cross_street;
        break;
      }

      // optional string first_cross_street = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_cross_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_cross_street()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_second_cross_street;
        break;
      }

      // optional string second_cross_street = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second_cross_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second_cross_street()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_event_code;
        break;
      }

      // optional int32 event_code = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_code_)));
          set_has_event_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_speed;
        break;
      }

      // optional int32 speed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_blocking;
        break;
      }

      // optional bool is_blocking = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_blocking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blocking_)));
          set_has_is_blocking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_edge_id;
        break;
      }

      // repeated string edge_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_edge_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_edge_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficIncident::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string traffic_id = 1;
  for (int i = 0; i < this->traffic_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->traffic_id(i), output);
  }

  // optional string incident_type = 2;
  if (has_incident_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->incident_type(), output);
  }

  // optional .com.telenav.proto.map.Severity incident_severity = 3;
  if (has_incident_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->incident_severity(), output);
  }

  // optional .com.telenav.proto.LatLon incident_location = 4;
  if (has_incident_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->incident_location(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }

  // optional string street_name = 6;
  if (has_street_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->street_name(), output);
  }

  // optional string first_cross_street = 7;
  if (has_first_cross_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->first_cross_street(), output);
  }

  // optional string second_cross_street = 8;
  if (has_second_cross_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->second_cross_street(), output);
  }

  // optional int32 event_code = 9;
  if (has_event_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->event_code(), output);
  }

  // optional int64 end_time = 10;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->end_time(), output);
  }

  // optional int32 speed = 11;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->speed(), output);
  }

  // optional bool is_blocking = 12;
  if (has_is_blocking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_blocking(), output);
  }

  // repeated string edge_id = 14;
  for (int i = 0; i < this->edge_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->edge_id(i), output);
  }

}

int TrafficIncident::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string incident_type = 2;
    if (has_incident_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->incident_type());
    }

    // optional .com.telenav.proto.map.Severity incident_severity = 3;
    if (has_incident_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->incident_severity());
    }

    // optional .com.telenav.proto.LatLon incident_location = 4;
    if (has_incident_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->incident_location());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string street_name = 6;
    if (has_street_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street_name());
    }

    // optional string first_cross_street = 7;
    if (has_first_cross_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_cross_street());
    }

    // optional string second_cross_street = 8;
    if (has_second_cross_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->second_cross_street());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 event_code = 9;
    if (has_event_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_code());
    }

    // optional int64 end_time = 10;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 speed = 11;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional bool is_blocking = 12;
    if (has_is_blocking()) {
      total_size += 1 + 1;
    }

  }
  // repeated string traffic_id = 1;
  total_size += 1 * this->traffic_id_size();
  for (int i = 0; i < this->traffic_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->traffic_id(i));
  }

  // repeated string edge_id = 14;
  total_size += 1 * this->edge_id_size();
  for (int i = 0; i < this->edge_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->edge_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficIncident::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrafficIncident*>(&from));
}

void TrafficIncident::MergeFrom(const TrafficIncident& from) {
  GOOGLE_CHECK_NE(&from, this);
  traffic_id_.MergeFrom(from.traffic_id_);
  edge_id_.MergeFrom(from.edge_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_incident_type()) {
      set_incident_type(from.incident_type());
    }
    if (from.has_incident_severity()) {
      set_incident_severity(from.incident_severity());
    }
    if (from.has_incident_location()) {
      mutable_incident_location()->::com::telenav::proto::LatLon::MergeFrom(from.incident_location());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_street_name()) {
      set_street_name(from.street_name());
    }
    if (from.has_first_cross_street()) {
      set_first_cross_street(from.first_cross_street());
    }
    if (from.has_second_cross_street()) {
      set_second_cross_street(from.second_cross_street());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_event_code()) {
      set_event_code(from.event_code());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_is_blocking()) {
      set_is_blocking(from.is_blocking());
    }
  }
}

void TrafficIncident::CopyFrom(const TrafficIncident& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficIncident::IsInitialized() const {

  if (has_incident_location()) {
    if (!this->incident_location().IsInitialized()) return false;
  }
  return true;
}

void TrafficIncident::Swap(TrafficIncident* other) {
  if (other != this) {
    traffic_id_.Swap(&other->traffic_id_);
    std::swap(incident_type_, other->incident_type_);
    std::swap(incident_severity_, other->incident_severity_);
    std::swap(incident_location_, other->incident_location_);
    std::swap(description_, other->description_);
    std::swap(street_name_, other->street_name_);
    std::swap(first_cross_street_, other->first_cross_street_);
    std::swap(second_cross_street_, other->second_cross_street_);
    std::swap(event_code_, other->event_code_);
    std::swap(end_time_, other->end_time_);
    std::swap(speed_, other->speed_);
    std::swap(is_blocking_, other->is_blocking_);
    edge_id_.Swap(&other->edge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrafficIncident::GetTypeName() const {
  return "com.telenav.proto.map.TrafficIncident";
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficLevelDictionary::kLevelPairsFieldNumber;
#endif  // !_MSC_VER

TrafficLevelDictionary::TrafficLevelDictionary()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrafficLevelDictionary::InitAsDefaultInstance() {
}

TrafficLevelDictionary::TrafficLevelDictionary(const TrafficLevelDictionary& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficLevelDictionary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLevelDictionary::~TrafficLevelDictionary() {
  SharedDtor();
}

void TrafficLevelDictionary::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TrafficLevelDictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrafficLevelDictionary& TrafficLevelDictionary::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

TrafficLevelDictionary* TrafficLevelDictionary::default_instance_ = NULL;

TrafficLevelDictionary* TrafficLevelDictionary::New() const {
  return new TrafficLevelDictionary;
}

void TrafficLevelDictionary::Clear() {
  level_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrafficLevelDictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.telenav.proto.map.TrafficLevelPair level_pairs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_level_pairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficLevelDictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.telenav.proto.map.TrafficLevelPair level_pairs = 1;
  for (int i = 0; i < this->level_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->level_pairs(i), output);
  }

}

int TrafficLevelDictionary::ByteSize() const {
  int total_size = 0;

  // repeated .com.telenav.proto.map.TrafficLevelPair level_pairs = 1;
  total_size += 1 * this->level_pairs_size();
  for (int i = 0; i < this->level_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_pairs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLevelDictionary::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrafficLevelDictionary*>(&from));
}

void TrafficLevelDictionary::MergeFrom(const TrafficLevelDictionary& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_pairs_.MergeFrom(from.level_pairs_);
}

void TrafficLevelDictionary::CopyFrom(const TrafficLevelDictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLevelDictionary::IsInitialized() const {

  return true;
}

void TrafficLevelDictionary::Swap(TrafficLevelDictionary* other) {
  if (other != this) {
    level_pairs_.Swap(&other->level_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrafficLevelDictionary::GetTypeName() const {
  return "com.telenav.proto.map.TrafficLevelDictionary";
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficLevelPair::kTrafficLevelIdFieldNumber;
const int TrafficLevelPair::kTrafficLevelStrFieldNumber;
#endif  // !_MSC_VER

TrafficLevelPair::TrafficLevelPair()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrafficLevelPair::InitAsDefaultInstance() {
}

TrafficLevelPair::TrafficLevelPair(const TrafficLevelPair& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficLevelPair::SharedCtor() {
  _cached_size_ = 0;
  traffic_level_id_ = 0;
  traffic_level_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLevelPair::~TrafficLevelPair() {
  SharedDtor();
}

void TrafficLevelPair::SharedDtor() {
  if (traffic_level_str_ != &::google::protobuf::internal::kEmptyString) {
    delete traffic_level_str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TrafficLevelPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrafficLevelPair& TrafficLevelPair::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_map_2etraffic_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_map_2etraffic_2eproto();
#endif
  return *default_instance_;
}

TrafficLevelPair* TrafficLevelPair::default_instance_ = NULL;

TrafficLevelPair* TrafficLevelPair::New() const {
  return new TrafficLevelPair;
}

void TrafficLevelPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    traffic_level_id_ = 0;
    if (has_traffic_level_str()) {
      if (traffic_level_str_ != &::google::protobuf::internal::kEmptyString) {
        traffic_level_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrafficLevelPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 traffic_level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traffic_level_id_)));
          set_has_traffic_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_traffic_level_str;
        break;
      }

      // optional string traffic_level_str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_level_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_level_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficLevelPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 traffic_level_id = 1;
  if (has_traffic_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->traffic_level_id(), output);
  }

  // optional string traffic_level_str = 2;
  if (has_traffic_level_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->traffic_level_str(), output);
  }

}

int TrafficLevelPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 traffic_level_id = 1;
    if (has_traffic_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traffic_level_id());
    }

    // optional string traffic_level_str = 2;
    if (has_traffic_level_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traffic_level_str());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLevelPair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrafficLevelPair*>(&from));
}

void TrafficLevelPair::MergeFrom(const TrafficLevelPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_traffic_level_id()) {
      set_traffic_level_id(from.traffic_level_id());
    }
    if (from.has_traffic_level_str()) {
      set_traffic_level_str(from.traffic_level_str());
    }
  }
}

void TrafficLevelPair::CopyFrom(const TrafficLevelPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLevelPair::IsInitialized() const {

  return true;
}

void TrafficLevelPair::Swap(TrafficLevelPair* other) {
  if (other != this) {
    std::swap(traffic_level_id_, other->traffic_level_id_);
    std::swap(traffic_level_str_, other->traffic_level_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrafficLevelPair::GetTypeName() const {
  return "com.telenav.proto.map.TrafficLevelPair";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace proto
}  // namespace telenav
}  // namespace com

// @@protoc_insertion_point(global_scope)
