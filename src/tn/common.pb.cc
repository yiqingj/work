// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mapnik/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace telenav {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LatLon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatLon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* Street_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Street_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* Facet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Facet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Currency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Currency_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameValuePair_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CurrencyCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Country_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  LatLon_descriptor_ = file->message_type(0);
  static const int LatLon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, lon_),
  };
  LatLon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LatLon_descriptor_,
      LatLon::default_instance_,
      LatLon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LatLon));
  Address_descriptor_ = file->message_type(1);
  static const int Address_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, formatted_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, house_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, suite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, sub_street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, cross_street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, sub_locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, county_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, postal_code_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  Street_descriptor_ = file->message_type(2);
  static const int Street_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Street, dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Street, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Street, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Street, formatted_name_),
  };
  Street_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Street_descriptor_,
      Street::default_instance_,
      Street_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Street, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Street, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Street));
  SearchQuery_descriptor_ = file->message_type(3);
  static const int SearchQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQuery, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQuery, category_),
  };
  SearchQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchQuery_descriptor_,
      SearchQuery::default_instance_,
      SearchQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchQuery));
  Facet_descriptor_ = file->message_type(4);
  static const int Facet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Facet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Facet, facet_data_),
  };
  Facet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Facet_descriptor_,
      Facet::default_instance_,
      Facet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Facet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Facet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Facet));
  Currency_descriptor_ = file->message_type(5);
  static const int Currency_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, iso_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, symbol_),
  };
  Currency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Currency_descriptor_,
      Currency::default_instance_,
      Currency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Currency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Currency));
  NameValuePair_descriptor_ = file->message_type(6);
  static const int NameValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValuePair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValuePair, value_),
  };
  NameValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameValuePair_descriptor_,
      NameValuePair::default_instance_,
      NameValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameValuePair));
  CurrencyCode_descriptor_ = file->enum_type(0);
  Country_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LatLon_descriptor_, &LatLon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Street_descriptor_, &Street::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchQuery_descriptor_, &SearchQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Facet_descriptor_, &Facet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Currency_descriptor_, &Currency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameValuePair_descriptor_, &NameValuePair::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete LatLon::default_instance_;
  delete LatLon_reflection_;
  delete Address::default_instance_;
  delete Address_reflection_;
  delete Street::default_instance_;
  delete Street_reflection_;
  delete SearchQuery::default_instance_;
  delete SearchQuery_reflection_;
  delete Facet::default_instance_;
  delete Facet_reflection_;
  delete Currency::default_instance_;
  delete Currency_reflection_;
  delete NameValuePair::default_instance_;
  delete NameValuePair_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\021com.telenav.proto\"\"\n\006Lat"
    "Lon\022\013\n\003lat\030\001 \002(\001\022\013\n\003lon\030\002 \002(\001\"\321\002\n\007Addres"
    "s\022\031\n\021formatted_address\030\n \001(\t\022\024\n\014house_nu"
    "mber\030\024 \001(\t\022\r\n\005suite\030\036 \001(\t\022\022\n\nsub_street\030"
    "( \001(\t\022)\n\006street\0302 \001(\0132\031.com.telenav.prot"
    "o.Street\022/\n\014cross_street\030< \001(\0132\031.com.tel"
    "enav.proto.Street\022\024\n\014sub_locality\030F \001(\t\022"
    "\020\n\010locality\030P \001(\t\022\014\n\004city\030Z \001(\t\022\016\n\006count"
    "y\030d \001(\t\022\r\n\005state\030n \001(\t\022+\n\007country\030x \001(\0162"
    "\032.com.telenav.proto.Country\022\024\n\013postal_co"
    "de\030\202\001 \001(\t\"J\n\006Street\022\014\n\004dirs\030\n \003(\t\022\014\n\004bod"
    "y\030\024 \001(\t\022\014\n\004type\030\036 \001(\t\022\026\n\016formatted_name\030"
    "( \001(\t\"/\n\013SearchQuery\022\016\n\006domain\030\n \003(\t\022\020\n\010"
    "category\030\024 \003(\t\")\n\005Facet\022\014\n\004type\030\n \002(\t\022\022\n"
    "\nfacet_data\030\024 \002(\t\"\\\n\010Currency\022\r\n\005value\030\n"
    " \002(\002\0221\n\010iso_code\030\024 \002(\0162\037.com.telenav.pro"
    "to.CurrencyCode\022\016\n\006symbol\030\036 \001(\t\",\n\rNameV"
    "aluePair\022\014\n\004name\030\n \002(\t\022\r\n\005value\030\024 \002(\t*\307\r"
    "\n\014CurrencyCode\022\010\n\003AED\020\220\006\022\010\n\003AFN\020\313\007\022\007\n\003AL"
    "L\020\010\022\007\n\003AMD\0203\022\010\n\003ANG\020\224\004\022\010\n\003AOA\020\315\007\022\007\n\003ARS\020"
    " \022\007\n\003AUD\020$\022\010\n\003AWG\020\225\004\022\010\n\003AZN\020\260\007\022\010\n\003BAM\020\321\007"
    "\022\007\n\003BBD\0204\022\007\n\003BDT\0202\022\010\n\003BGN\020\317\007\022\007\n\003BHD\0200\022\007\n"
    "\003BIF\020l\022\007\n\003BMD\020<\022\007\n\003BND\020`\022\007\n\003BOB\020D\022\010\n\003BOV"
    "\020\330\007\022\010\n\003BRL\020\332\007\022\007\n\003BTN\020@\022\007\n\003BWP\020H\022\010\n\003BYR\020\316"
    "\007\022\007\n\003BZD\020T\022\007\n\003CAD\020|\022\010\n\003CDF\020\320\007\022\010\n\003CHE\020\263\007\022"
    "\010\n\003CHF\020\364\005\022\010\n\003CHW\020\264\007\022\010\n\003CLF\020\336\007\022\010\n\003CLP\020\230\001\022"
    "\010\n\003CNY\020\234\001\022\010\n\003COP\020\252\001\022\010\n\003COU\020\312\007\022\010\n\003CRC\020\274\001\022"
    "\010\n\003CUC\020\243\007\022\010\n\003CUP\020\300\001\022\010\n\003CVE\020\204\001\022\010\n\003CZK\020\313\001\022"
    "\010\n\003DJF\020\206\002\022\010\n\003DKK\020\320\001\022\010\n\003DOP\020\326\001\022\007\n\003DZD\020\014\022\010"
    "\n\003EGP\020\262\006\022\010\n\003ERN\020\350\001\022\010\n\003ETB\020\346\001\022\010\n\003EUR\020\322\007\022\010"
    "\n\003FJD\020\362\001\022\010\n\003FKP\020\356\001\022\010\n\003GBP\020\272\006\022\010\n\003GEL\020\325\007\022\010"
    "\n\003GHS\020\250\007\022\010\n\003GIP\020\244\002\022\010\n\003GMD\020\216\002\022\010\n\003GNF\020\304\002\022\010"
    "\n\003GTQ\020\300\002\022\010\n\003GYD\020\310\002\022\010\n\003HKD\020\330\002\022\010\n\003HNL\020\324\002\022\010"
    "\n\003HRK\020\277\001\022\010\n\003HTG\020\314\002\022\010\n\003HUF\020\334\002\022\010\n\003IDR\020\350\002\022\010"
    "\n\003ILS\020\370\002\022\010\n\003INR\020\344\002\022\010\n\003IQD\020\360\002\022\010\n\003IRR\020\354\002\022\010"
    "\n\003ISK\020\340\002\022\010\n\003JMD\020\204\003\022\010\n\003JOD\020\220\003\022\010\n\003JPY\020\210\003\022\010"
    "\n\003KES\020\224\003\022\010\n\003KGS\020\241\003\022\007\n\003KHR\020t\022\010\n\003KMF\020\256\001\022\010\n"
    "\003KPW\020\230\003\022\010\n\003KRW\020\232\003\022\010\n\003KWD\020\236\003\022\010\n\003KYD\020\210\001\022\010\n"
    "\003KZT\020\216\003\022\010\n\003LAK\020\242\003\022\010\n\003LBP\020\246\003\022\010\n\003LKR\020\220\001\022\010\n"
    "\003LRD\020\256\003\022\010\n\003LSL\020\252\003\022\010\n\003LTL\020\270\003\022\010\n\003LVL\020\254\003\022\010\n"
    "\003LYD\020\262\003\022\010\n\003MAD\020\370\003\022\010\n\003MDL\020\362\003\022\010\n\003MGA\020\311\007\022\010\n"
    "\003MKD\020\247\006\022\007\n\003MMK\020h\022\010\n\003MNT\020\360\003\022\010\n\003MOP\020\276\003\022\010\n\003"
    "MRO\020\336\003\022\010\n\003MUR\020\340\003\022\010\n\003MVR\020\316\003\022\010\n\003MWK\020\306\003\022\010\n\003"
    "MXN\020\344\003\022\010\n\003MXV\020\323\007\022\010\n\003MYR\020\312\003\022\010\n\003MZN\020\257\007\022\010\n\003"
    "NAD\020\204\004\022\010\n\003NGN\020\266\004\022\010\n\003NIO\020\256\004\022\010\n\003NOK\020\302\004\022\010\n\003"
    "NPR\020\214\004\022\010\n\003NZD\020\252\004\022\010\n\003OMR\020\200\004\022\010\n\003PAB\020\316\004\022\010\n\003"
    "PEN\020\334\004\022\010\n\003PGK\020\326\004\022\010\n\003PHP\020\340\004\022\010\n\003PKR\020\312\004\022\010\n\003"
    "PLN\020\331\007\022\010\n\003PYG\020\330\004\022\010\n\003QAR\020\372\004\022\010\n\003RON\020\262\007\022\010\n\003"
    "RSD\020\255\007\022\010\n\003RUB\020\203\005\022\010\n\003RWF\020\206\005\022\010\n\003SAR\020\252\005\022\007\n\003"
    "SBD\020Z\022\010\n\003SCR\020\262\005\022\010\n\003SDG\020\252\007\022\010\n\003SEK\020\360\005\022\010\n\003S"
    "GD\020\276\005\022\010\n\003SHP\020\216\005\022\010\n\003SLL\020\266\005\022\010\n\003SOS\020\302\005\022\010\n\003S"
    "RD\020\310\007\022\010\n\003SSP\020\330\005\022\010\n\003STD\020\246\005\022\010\n\003SYP\020\370\005\022\010\n\003S"
    "ZL\020\354\005\022\010\n\003THB\020\374\005\022\010\n\003TJS\020\314\007\022\010\n\003TMT\020\246\007\022\010\n\003T"
    "ND\020\224\006\022\010\n\003TOP\020\210\006\022\010\n\003TRY\020\265\007\022\010\n\003TTD\020\214\006\022\010\n\003T"
    "WD\020\205\007\022\010\n\003TZS\020\302\006\022\010\n\003UAH\020\324\007\022\010\n\003UGX\020\240\006\022\010\n\003U"
    "SD\020\310\006\022\010\n\003USN\020\345\007\022\010\n\003USS\020\346\007\022\010\n\003UYI\020\254\007\022\010\n\003U"
    "YU\020\332\006\022\010\n\003UZS\020\334\006\022\010\n\003VEF\020\251\007\022\010\n\003VND\020\300\005\022\010\n\003V"
    "UV\020\244\004\022\010\n\003WST\020\362\006\022\010\n\003XAF\020\266\007\022\010\n\003XAG\020\301\007\022\010\n\003X"
    "AU\020\277\007\022\010\n\003XBA\020\273\007\022\010\n\003XBB\020\274\007\022\010\n\003XBC\020\275\007\022\010\n\003X"
    "BD\020\276\007\022\010\n\003XCD\020\267\007\022\010\n\003XDR\020\300\007\022\010\n\003XOF\020\270\007\022\010\n\003X"
    "PD\020\304\007\022\010\n\003XPF\020\271\007\022\010\n\003XPT\020\302\007\022\010\n\003YER\020\366\006\022\010\n\003Z"
    "AR\020\306\005\022\010\n\003ZMW\020\307\007*\226\020\n\007Country\022\006\n\002AD\020\001\022\006\n\002A"
    "E\020\002\022\006\n\002AF\020\003\022\006\n\002AG\020\004\022\006\n\002AI\020\005\022\006\n\002AL\020\006\022\006\n\002A"
    "M\020\007\022\006\n\002AN\020\010\022\006\n\002AO\020\t\022\006\n\002AQ\020\n\022\006\n\002AR\020\013\022\006\n\002A"
    "S\020\014\022\006\n\002AT\020\r\022\006\n\002AU\020\016\022\006\n\002AW\020\017\022\006\n\002AX\020\020\022\006\n\002A"
    "Z\020\021\022\006\n\002BA\020\022\022\006\n\002BB\020\023\022\006\n\002BD\020\024\022\006\n\002BE\020\025\022\006\n\002B"
    "F\020\026\022\006\n\002BG\020\027\022\006\n\002BH\020\030\022\006\n\002BI\020\031\022\006\n\002BJ\020\032\022\006\n\002B"
    "L\020\033\022\006\n\002BM\020\034\022\006\n\002BN\020\035\022\006\n\002BO\020\036\022\006\n\002BR\020\037\022\006\n\002B"
    "S\020 \022\006\n\002BT\020!\022\006\n\002BV\020\"\022\006\n\002BW\020#\022\006\n\002BY\020$\022\006\n\002B"
    "Z\020%\022\006\n\002CA\020&\022\006\n\002CC\020\'\022\006\n\002CD\020(\022\006\n\002CF\020)\022\006\n\002C"
    "G\020*\022\006\n\002CH\020+\022\006\n\002CI\020,\022\006\n\002CK\020-\022\006\n\002CL\020.\022\006\n\002C"
    "M\020/\022\006\n\002CN\0200\022\006\n\002CO\0201\022\006\n\002CR\0202\022\006\n\002CU\0203\022\006\n\002C"
    "V\0204\022\006\n\002CX\0205\022\006\n\002CY\0206\022\006\n\002CZ\0207\022\006\n\002DE\0208\022\006\n\002D"
    "J\0209\022\006\n\002DK\020:\022\006\n\002DM\020;\022\006\n\002DO\020<\022\006\n\002DZ\020=\022\006\n\002E"
    "C\020>\022\006\n\002EE\020\?\022\006\n\002EG\020@\022\006\n\002EH\020A\022\006\n\002ER\020B\022\006\n\002E"
    "S\020C\022\006\n\002ET\020D\022\006\n\002FI\020E\022\006\n\002FJ\020F\022\006\n\002FK\020G\022\006\n\002F"
    "M\020H\022\006\n\002FO\020I\022\006\n\002FR\020J\022\006\n\002GA\020K\022\006\n\002GB\020L\022\006\n\002G"
    "D\020M\022\006\n\002GE\020N\022\006\n\002GF\020O\022\006\n\002GG\020P\022\006\n\002GH\020Q\022\006\n\002G"
    "I\020R\022\006\n\002GL\020S\022\006\n\002GM\020T\022\006\n\002GN\020U\022\006\n\002GP\020V\022\006\n\002G"
    "Q\020W\022\006\n\002GR\020X\022\006\n\002GS\020Y\022\006\n\002GT\020Z\022\006\n\002GU\020[\022\006\n\002G"
    "W\020\\\022\006\n\002GY\020]\022\006\n\002HK\020^\022\006\n\002HM\020_\022\006\n\002HN\020`\022\006\n\002H"
    "R\020a\022\006\n\002HT\020b\022\006\n\002HU\020c\022\006\n\002ID\020d\022\006\n\002IE\020e\022\006\n\002I"
    "L\020f\022\006\n\002IM\020g\022\006\n\002IO\020i\022\006\n\002IQ\020j\022\006\n\002IR\020k\022\006\n\002I"
    "S\020l\022\006\n\002IT\020m\022\006\n\002JE\020n\022\006\n\002JM\020o\022\006\n\002JO\020p\022\006\n\002J"
    "P\020q\022\006\n\002KE\020r\022\006\n\002KG\020s\022\006\n\002KH\020t\022\006\n\002KI\020u\022\006\n\002K"
    "M\020v\022\006\n\002KN\020w\022\006\n\002KP\020x\022\006\n\002KR\020y\022\006\n\002KW\020z\022\006\n\002K"
    "Y\020{\022\006\n\002KZ\020|\022\006\n\002LA\020}\022\006\n\002LB\020~\022\006\n\002LC\020\177\022\007\n\002L"
    "I\020\200\001\022\007\n\002LK\020\201\001\022\007\n\002LR\020\202\001\022\007\n\002LS\020\203\001\022\007\n\002LT\020\204\001"
    "\022\007\n\002LU\020\205\001\022\007\n\002LV\020\206\001\022\007\n\002LY\020\207\001\022\007\n\002MA\020\210\001\022\007\n\002"
    "MC\020\211\001\022\007\n\002MD\020\212\001\022\007\n\002ME\020\213\001\022\007\n\002MF\020\214\001\022\007\n\002MG\020\215"
    "\001\022\007\n\002MH\020\216\001\022\007\n\002MK\020\217\001\022\007\n\002ML\020\220\001\022\007\n\002MM\020\221\001\022\007\n"
    "\002MN\020\222\001\022\007\n\002MO\020\223\001\022\007\n\002MP\020\224\001\022\007\n\002MQ\020\225\001\022\007\n\002MR\020"
    "\226\001\022\007\n\002MS\020\227\001\022\007\n\002MT\020\230\001\022\007\n\002MU\020\231\001\022\007\n\002MV\020\232\001\022\007"
    "\n\002MW\020\233\001\022\007\n\002MX\020\234\001\022\007\n\002MY\020\235\001\022\007\n\002MZ\020\236\001\022\007\n\002NA"
    "\020\237\001\022\007\n\002NC\020\240\001\022\007\n\002NE\020\241\001\022\007\n\002NF\020\242\001\022\007\n\002NG\020\243\001\022"
    "\007\n\002NI\020\244\001\022\007\n\002NL\020\245\001\022\007\n\002NP\020\247\001\022\007\n\002NR\020\250\001\022\007\n\002N"
    "U\020\251\001\022\007\n\002NZ\020\252\001\022\007\n\002OM\020\253\001\022\007\n\002PA\020\254\001\022\007\n\002PE\020\255\001"
    "\022\007\n\002PF\020\256\001\022\007\n\002PG\020\257\001\022\007\n\002PH\020\260\001\022\007\n\002PK\020\261\001\022\007\n\002"
    "PL\020\262\001\022\007\n\002PM\020\263\001\022\007\n\002PN\020\264\001\022\007\n\002PR\020\265\001\022\007\n\002PS\020\266"
    "\001\022\007\n\002PT\020\267\001\022\007\n\002PW\020\270\001\022\007\n\002PY\020\271\001\022\007\n\002QA\020\272\001\022\007\n"
    "\002RE\020\273\001\022\007\n\002RO\020\274\001\022\007\n\002RS\020\275\001\022\007\n\002RU\020\276\001\022\007\n\002RW\020"
    "\277\001\022\007\n\002SA\020\300\001\022\007\n\002SB\020\301\001\022\007\n\002SC\020\302\001\022\007\n\002SD\020\303\001\022\007"
    "\n\002SE\020\304\001\022\007\n\002SG\020\305\001\022\007\n\002SH\020\306\001\022\007\n\002SI\020\307\001\022\007\n\002SJ"
    "\020\310\001\022\007\n\002SK\020\311\001\022\007\n\002SL\020\312\001\022\007\n\002SM\020\313\001\022\007\n\002SN\020\314\001\022"
    "\007\n\002SO\020\315\001\022\007\n\002SR\020\316\001\022\007\n\002ST\020\317\001\022\007\n\002SV\020\320\001\022\007\n\002S"
    "Y\020\321\001\022\007\n\002SZ\020\322\001\022\007\n\002TC\020\323\001\022\007\n\002TD\020\324\001\022\007\n\002TF\020\325\001"
    "\022\007\n\002TG\020\326\001\022\007\n\002TH\020\327\001\022\007\n\002TJ\020\330\001\022\007\n\002TK\020\331\001\022\007\n\002"
    "TL\020\332\001\022\007\n\002TM\020\333\001\022\007\n\002TN\020\334\001\022\007\n\002TO\020\335\001\022\007\n\002TR\020\336"
    "\001\022\007\n\002TT\020\337\001\022\007\n\002TV\020\340\001\022\007\n\002TW\020\341\001\022\007\n\002TZ\020\342\001\022\007\n"
    "\002UA\020\343\001\022\007\n\002UG\020\344\001\022\007\n\002UM\020\345\001\022\007\n\002US\020\346\001\022\007\n\002UY\020"
    "\347\001\022\007\n\002UZ\020\350\001\022\007\n\002VA\020\351\001\022\007\n\002VC\020\352\001\022\007\n\002VE\020\353\001\022\007"
    "\n\002VG\020\354\001\022\007\n\002VI\020\355\001\022\007\n\002VN\020\356\001\022\007\n\002VU\020\357\001\022\007\n\002WF"
    "\020\360\001\022\007\n\002WS\020\361\001\022\007\n\002YE\020\362\001\022\007\n\002YT\020\363\001\022\007\n\002ZA\020\364\001\022"
    "\007\n\002ZM\020\365\001B*\n\030com.telenav.proto.commonB\014Co"
    "mmonProtocP\001", 4572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  LatLon::default_instance_ = new LatLon();
  Address::default_instance_ = new Address();
  Street::default_instance_ = new Street();
  SearchQuery::default_instance_ = new SearchQuery();
  Facet::default_instance_ = new Facet();
  Currency::default_instance_ = new Currency();
  NameValuePair::default_instance_ = new NameValuePair();
  LatLon::default_instance_->InitAsDefaultInstance();
  Address::default_instance_->InitAsDefaultInstance();
  Street::default_instance_->InitAsDefaultInstance();
  SearchQuery::default_instance_->InitAsDefaultInstance();
  Facet::default_instance_->InitAsDefaultInstance();
  Currency::default_instance_->InitAsDefaultInstance();
  NameValuePair::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* CurrencyCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyCode_descriptor_;
}
bool CurrencyCode_IsValid(int value) {
  switch(value) {
    case 8:
    case 12:
    case 32:
    case 36:
    case 48:
    case 50:
    case 51:
    case 52:
    case 60:
    case 64:
    case 68:
    case 72:
    case 84:
    case 90:
    case 96:
    case 104:
    case 108:
    case 116:
    case 124:
    case 132:
    case 136:
    case 144:
    case 152:
    case 156:
    case 170:
    case 174:
    case 188:
    case 191:
    case 192:
    case 203:
    case 208:
    case 214:
    case 230:
    case 232:
    case 238:
    case 242:
    case 262:
    case 270:
    case 292:
    case 320:
    case 324:
    case 328:
    case 332:
    case 340:
    case 344:
    case 348:
    case 352:
    case 356:
    case 360:
    case 364:
    case 368:
    case 376:
    case 388:
    case 392:
    case 398:
    case 400:
    case 404:
    case 408:
    case 410:
    case 414:
    case 417:
    case 418:
    case 422:
    case 426:
    case 428:
    case 430:
    case 434:
    case 440:
    case 446:
    case 454:
    case 458:
    case 462:
    case 478:
    case 480:
    case 484:
    case 496:
    case 498:
    case 504:
    case 512:
    case 516:
    case 524:
    case 532:
    case 533:
    case 548:
    case 554:
    case 558:
    case 566:
    case 578:
    case 586:
    case 590:
    case 598:
    case 600:
    case 604:
    case 608:
    case 634:
    case 643:
    case 646:
    case 654:
    case 678:
    case 682:
    case 690:
    case 694:
    case 702:
    case 704:
    case 706:
    case 710:
    case 728:
    case 748:
    case 752:
    case 756:
    case 760:
    case 764:
    case 776:
    case 780:
    case 784:
    case 788:
    case 800:
    case 807:
    case 818:
    case 826:
    case 834:
    case 840:
    case 858:
    case 860:
    case 882:
    case 886:
    case 901:
    case 931:
    case 934:
    case 936:
    case 937:
    case 938:
    case 940:
    case 941:
    case 943:
    case 944:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 964:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 978:
    case 979:
    case 980:
    case 981:
    case 984:
    case 985:
    case 986:
    case 990:
    case 997:
    case 998:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Country_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_descriptor_;
}
bool Country_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LatLon::kLatFieldNumber;
const int LatLon::kLonFieldNumber;
#endif  // !_MSC_VER

LatLon::LatLon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LatLon::InitAsDefaultInstance() {
}

LatLon::LatLon(const LatLon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LatLon::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatLon::~LatLon() {
  SharedDtor();
}

void LatLon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatLon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatLon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatLon_descriptor_;
}

const LatLon& LatLon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LatLon* LatLon::default_instance_ = NULL;

LatLon* LatLon::New() const {
  return new LatLon;
}

void LatLon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LatLon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // required double lon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LatLon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LatLon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // required double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LatLon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatLon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LatLon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LatLon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LatLon::MergeFrom(const LatLon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LatLon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatLon::CopyFrom(const LatLon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LatLon::Swap(LatLon* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LatLon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatLon_descriptor_;
  metadata.reflection = LatLon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Address::kFormattedAddressFieldNumber;
const int Address::kHouseNumberFieldNumber;
const int Address::kSuiteFieldNumber;
const int Address::kSubStreetFieldNumber;
const int Address::kStreetFieldNumber;
const int Address::kCrossStreetFieldNumber;
const int Address::kSubLocalityFieldNumber;
const int Address::kLocalityFieldNumber;
const int Address::kCityFieldNumber;
const int Address::kCountyFieldNumber;
const int Address::kStateFieldNumber;
const int Address::kCountryFieldNumber;
const int Address::kPostalCodeFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
  street_ = const_cast< ::com::telenav::proto::Street*>(&::com::telenav::proto::Street::default_instance());
  cross_street_ = const_cast< ::com::telenav::proto::Street*>(&::com::telenav::proto::Street::default_instance());
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  formatted_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  house_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sub_street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_ = NULL;
  cross_street_ = NULL;
  sub_locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  county_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = 1;
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (formatted_address_ != &::google::protobuf::internal::kEmptyString) {
    delete formatted_address_;
  }
  if (house_number_ != &::google::protobuf::internal::kEmptyString) {
    delete house_number_;
  }
  if (suite_ != &::google::protobuf::internal::kEmptyString) {
    delete suite_;
  }
  if (sub_street_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_street_;
  }
  if (sub_locality_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_locality_;
  }
  if (locality_ != &::google::protobuf::internal::kEmptyString) {
    delete locality_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (county_ != &::google::protobuf::internal::kEmptyString) {
    delete county_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
    delete postal_code_;
  }
  if (this != default_instance_) {
    delete street_;
    delete cross_street_;
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_formatted_address()) {
      if (formatted_address_ != &::google::protobuf::internal::kEmptyString) {
        formatted_address_->clear();
      }
    }
    if (has_house_number()) {
      if (house_number_ != &::google::protobuf::internal::kEmptyString) {
        house_number_->clear();
      }
    }
    if (has_suite()) {
      if (suite_ != &::google::protobuf::internal::kEmptyString) {
        suite_->clear();
      }
    }
    if (has_sub_street()) {
      if (sub_street_ != &::google::protobuf::internal::kEmptyString) {
        sub_street_->clear();
      }
    }
    if (has_street()) {
      if (street_ != NULL) street_->::com::telenav::proto::Street::Clear();
    }
    if (has_cross_street()) {
      if (cross_street_ != NULL) cross_street_->::com::telenav::proto::Street::Clear();
    }
    if (has_sub_locality()) {
      if (sub_locality_ != &::google::protobuf::internal::kEmptyString) {
        sub_locality_->clear();
      }
    }
    if (has_locality()) {
      if (locality_ != &::google::protobuf::internal::kEmptyString) {
        locality_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_county()) {
      if (county_ != &::google::protobuf::internal::kEmptyString) {
        county_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    country_ = 1;
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
        postal_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string formatted_address = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formatted_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->formatted_address().data(), this->formatted_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_house_number;
        break;
      }

      // optional string house_number = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_house_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_house_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->house_number().data(), this->house_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_suite;
        break;
      }

      // optional string suite = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suite()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suite().data(), this->suite().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_sub_street;
        break;
      }

      // optional string sub_street = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sub_street().data(), this->sub_street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_street;
        break;
      }

      // optional .com.telenav.proto.Street street = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_street()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_cross_street;
        break;
      }

      // optional .com.telenav.proto.Street cross_street = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cross_street()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_sub_locality;
        break;
      }

      // optional string sub_locality = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_locality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sub_locality().data(), this->sub_locality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_locality;
        break;
      }

      // optional string locality = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locality().data(), this->locality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_city;
        break;
      }

      // optional string city = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_county;
        break;
      }

      // optional string county = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_county:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_county()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->county().data(), this->county().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_state;
        break;
      }

      // optional string state = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_country;
        break;
      }

      // optional .com.telenav.proto.Country country = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::telenav::proto::Country_IsValid(value)) {
            set_country(static_cast< ::com::telenav::proto::Country >(value));
          } else {
            mutable_unknown_fields()->AddVarint(120, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1042)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string formatted_address = 10;
  if (has_formatted_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formatted_address().data(), this->formatted_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->formatted_address(), output);
  }

  // optional string house_number = 20;
  if (has_house_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->house_number().data(), this->house_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->house_number(), output);
  }

  // optional string suite = 30;
  if (has_suite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suite().data(), this->suite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->suite(), output);
  }

  // optional string sub_street = 40;
  if (has_sub_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_street().data(), this->sub_street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->sub_street(), output);
  }

  // optional .com.telenav.proto.Street street = 50;
  if (has_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->street(), output);
  }

  // optional .com.telenav.proto.Street cross_street = 60;
  if (has_cross_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->cross_street(), output);
  }

  // optional string sub_locality = 70;
  if (has_sub_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_locality().data(), this->sub_locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      70, this->sub_locality(), output);
  }

  // optional string locality = 80;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      80, this->locality(), output);
  }

  // optional string city = 90;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      90, this->city(), output);
  }

  // optional string county = 100;
  if (has_county()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->county().data(), this->county().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->county(), output);
  }

  // optional string state = 110;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      110, this->state(), output);
  }

  // optional .com.telenav.proto.Country country = 120;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      120, this->country(), output);
  }

  // optional string postal_code = 130;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      130, this->postal_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string formatted_address = 10;
  if (has_formatted_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formatted_address().data(), this->formatted_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->formatted_address(), target);
  }

  // optional string house_number = 20;
  if (has_house_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->house_number().data(), this->house_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->house_number(), target);
  }

  // optional string suite = 30;
  if (has_suite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suite().data(), this->suite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->suite(), target);
  }

  // optional string sub_street = 40;
  if (has_sub_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_street().data(), this->sub_street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->sub_street(), target);
  }

  // optional .com.telenav.proto.Street street = 50;
  if (has_street()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->street(), target);
  }

  // optional .com.telenav.proto.Street cross_street = 60;
  if (has_cross_street()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->cross_street(), target);
  }

  // optional string sub_locality = 70;
  if (has_sub_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_locality().data(), this->sub_locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->sub_locality(), target);
  }

  // optional string locality = 80;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->locality(), target);
  }

  // optional string city = 90;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->city(), target);
  }

  // optional string county = 100;
  if (has_county()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->county().data(), this->county().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->county(), target);
  }

  // optional string state = 110;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        110, this->state(), target);
  }

  // optional .com.telenav.proto.Country country = 120;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      120, this->country(), target);
  }

  // optional string postal_code = 130;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        130, this->postal_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string formatted_address = 10;
    if (has_formatted_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formatted_address());
    }

    // optional string house_number = 20;
    if (has_house_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->house_number());
    }

    // optional string suite = 30;
    if (has_suite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suite());
    }

    // optional string sub_street = 40;
    if (has_sub_street()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_street());
    }

    // optional .com.telenav.proto.Street street = 50;
    if (has_street()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->street());
    }

    // optional .com.telenav.proto.Street cross_street = 60;
    if (has_cross_street()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cross_street());
    }

    // optional string sub_locality = 70;
    if (has_sub_locality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_locality());
    }

    // optional string locality = 80;
    if (has_locality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string city = 90;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string county = 100;
    if (has_county()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->county());
    }

    // optional string state = 110;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional .com.telenav.proto.Country country = 120;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->country());
    }

    // optional string postal_code = 130;
    if (has_postal_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formatted_address()) {
      set_formatted_address(from.formatted_address());
    }
    if (from.has_house_number()) {
      set_house_number(from.house_number());
    }
    if (from.has_suite()) {
      set_suite(from.suite());
    }
    if (from.has_sub_street()) {
      set_sub_street(from.sub_street());
    }
    if (from.has_street()) {
      mutable_street()->::com::telenav::proto::Street::MergeFrom(from.street());
    }
    if (from.has_cross_street()) {
      mutable_cross_street()->::com::telenav::proto::Street::MergeFrom(from.cross_street());
    }
    if (from.has_sub_locality()) {
      set_sub_locality(from.sub_locality());
    }
    if (from.has_locality()) {
      set_locality(from.locality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_county()) {
      set_county(from.county());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {

  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(formatted_address_, other->formatted_address_);
    std::swap(house_number_, other->house_number_);
    std::swap(suite_, other->suite_);
    std::swap(sub_street_, other->sub_street_);
    std::swap(street_, other->street_);
    std::swap(cross_street_, other->cross_street_);
    std::swap(sub_locality_, other->sub_locality_);
    std::swap(locality_, other->locality_);
    std::swap(city_, other->city_);
    std::swap(county_, other->county_);
    std::swap(state_, other->state_);
    std::swap(country_, other->country_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Street::kDirsFieldNumber;
const int Street::kBodyFieldNumber;
const int Street::kTypeFieldNumber;
const int Street::kFormattedNameFieldNumber;
#endif  // !_MSC_VER

Street::Street()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Street::InitAsDefaultInstance() {
}

Street::Street(const Street& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Street::SharedCtor() {
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  formatted_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Street::~Street() {
  SharedDtor();
}

void Street::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (formatted_name_ != &::google::protobuf::internal::kEmptyString) {
    delete formatted_name_;
  }
  if (this != default_instance_) {
  }
}

void Street::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Street::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Street_descriptor_;
}

const Street& Street::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Street* Street::default_instance_ = NULL;

Street* Street::New() const {
  return new Street;
}

void Street::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_formatted_name()) {
      if (formatted_name_ != &::google::protobuf::internal::kEmptyString) {
        formatted_name_->clear();
      }
    }
  }
  dirs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Street::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dirs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dirs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dirs(this->dirs_size() - 1).data(),
            this->dirs(this->dirs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dirs;
        if (input->ExpectTag(162)) goto parse_body;
        break;
      }

      // optional string body = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_type;
        break;
      }

      // optional string type = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_formatted_name;
        break;
      }

      // optional string formatted_name = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formatted_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formatted_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->formatted_name().data(), this->formatted_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Street::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string dirs = 10;
  for (int i = 0; i < this->dirs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dirs(i).data(), this->dirs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->dirs(i), output);
  }

  // optional string body = 20;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->body(), output);
  }

  // optional string type = 30;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->type(), output);
  }

  // optional string formatted_name = 40;
  if (has_formatted_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formatted_name().data(), this->formatted_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->formatted_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Street::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string dirs = 10;
  for (int i = 0; i < this->dirs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirs(i).data(), this->dirs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->dirs(i), target);
  }

  // optional string body = 20;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->body(), target);
  }

  // optional string type = 30;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->type(), target);
  }

  // optional string formatted_name = 40;
  if (has_formatted_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formatted_name().data(), this->formatted_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->formatted_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Street::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string body = 20;
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string type = 30;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string formatted_name = 40;
    if (has_formatted_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formatted_name());
    }

  }
  // repeated string dirs = 10;
  total_size += 1 * this->dirs_size();
  for (int i = 0; i < this->dirs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dirs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Street::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Street* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Street*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Street::MergeFrom(const Street& from) {
  GOOGLE_CHECK_NE(&from, this);
  dirs_.MergeFrom(from.dirs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_formatted_name()) {
      set_formatted_name(from.formatted_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Street::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Street::CopyFrom(const Street& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Street::IsInitialized() const {

  return true;
}

void Street::Swap(Street* other) {
  if (other != this) {
    dirs_.Swap(&other->dirs_);
    std::swap(body_, other->body_);
    std::swap(type_, other->type_);
    std::swap(formatted_name_, other->formatted_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Street::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Street_descriptor_;
  metadata.reflection = Street_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchQuery::kDomainFieldNumber;
const int SearchQuery::kCategoryFieldNumber;
#endif  // !_MSC_VER

SearchQuery::SearchQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchQuery::InitAsDefaultInstance() {
}

SearchQuery::SearchQuery(const SearchQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchQuery::~SearchQuery() {
  SharedDtor();
}

void SearchQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchQuery_descriptor_;
}

const SearchQuery& SearchQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SearchQuery* SearchQuery::default_instance_ = NULL;

SearchQuery* SearchQuery::New() const {
  return new SearchQuery;
}

void SearchQuery::Clear() {
  domain_.Clear();
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string domain = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain(this->domain_size() - 1).data(),
            this->domain(this->domain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_domain;
        if (input->ExpectTag(162)) goto parse_category;
        break;
      }

      // repeated string category = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category(this->category_size() - 1).data(),
            this->category(this->category_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_category;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string domain = 10;
  for (int i = 0; i < this->domain_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->domain(i).data(), this->domain(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->domain(i), output);
  }

  // repeated string category = 20;
  for (int i = 0; i < this->category_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->category(i).data(), this->category(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->category(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string domain = 10;
  for (int i = 0; i < this->domain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain(i).data(), this->domain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->domain(i), target);
  }

  // repeated string category = 20;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category(i).data(), this->category(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->category(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchQuery::ByteSize() const {
  int total_size = 0;

  // repeated string domain = 10;
  total_size += 1 * this->domain_size();
  for (int i = 0; i < this->domain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->domain(i));
  }

  // repeated string category = 20;
  total_size += 2 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->category(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchQuery::MergeFrom(const SearchQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  domain_.MergeFrom(from.domain_);
  category_.MergeFrom(from.category_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchQuery::CopyFrom(const SearchQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchQuery::IsInitialized() const {

  return true;
}

void SearchQuery::Swap(SearchQuery* other) {
  if (other != this) {
    domain_.Swap(&other->domain_);
    category_.Swap(&other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchQuery_descriptor_;
  metadata.reflection = SearchQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Facet::kTypeFieldNumber;
const int Facet::kFacetDataFieldNumber;
#endif  // !_MSC_VER

Facet::Facet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Facet::InitAsDefaultInstance() {
}

Facet::Facet(const Facet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Facet::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facet_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Facet::~Facet() {
  SharedDtor();
}

void Facet::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (facet_data_ != &::google::protobuf::internal::kEmptyString) {
    delete facet_data_;
  }
  if (this != default_instance_) {
  }
}

void Facet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Facet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Facet_descriptor_;
}

const Facet& Facet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Facet* Facet::default_instance_ = NULL;

Facet* Facet::New() const {
  return new Facet;
}

void Facet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_facet_data()) {
      if (facet_data_ != &::google::protobuf::internal::kEmptyString) {
        facet_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Facet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_facet_data;
        break;
      }

      // required string facet_data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facet_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facet_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facet_data().data(), this->facet_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Facet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->type(), output);
  }

  // required string facet_data = 20;
  if (has_facet_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facet_data().data(), this->facet_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->facet_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Facet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->type(), target);
  }

  // required string facet_data = 20;
  if (has_facet_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facet_data().data(), this->facet_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->facet_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Facet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string facet_data = 20;
    if (has_facet_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facet_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Facet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Facet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Facet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Facet::MergeFrom(const Facet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_facet_data()) {
      set_facet_data(from.facet_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Facet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Facet::CopyFrom(const Facet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Facet::Swap(Facet* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(facet_data_, other->facet_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Facet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Facet_descriptor_;
  metadata.reflection = Facet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Currency::kValueFieldNumber;
const int Currency::kIsoCodeFieldNumber;
const int Currency::kSymbolFieldNumber;
#endif  // !_MSC_VER

Currency::Currency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Currency::InitAsDefaultInstance() {
}

Currency::Currency(const Currency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Currency::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  iso_code_ = 784;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Currency::~Currency() {
  SharedDtor();
}

void Currency::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void Currency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Currency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Currency_descriptor_;
}

const Currency& Currency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Currency* Currency::default_instance_ = NULL;

Currency* Currency::New() const {
  return new Currency;
}

void Currency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    iso_code_ = 784;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Currency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_iso_code;
        break;
      }

      // required .com.telenav.proto.CurrencyCode iso_code = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iso_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::telenav::proto::CurrencyCode_IsValid(value)) {
            set_iso_code(static_cast< ::com::telenav::proto::CurrencyCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_symbol;
        break;
      }

      // optional string symbol = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Currency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float value = 10;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->value(), output);
  }

  // required .com.telenav.proto.CurrencyCode iso_code = 20;
  if (has_iso_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->iso_code(), output);
  }

  // optional string symbol = 30;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Currency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float value = 10;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->value(), target);
  }

  // required .com.telenav.proto.CurrencyCode iso_code = 20;
  if (has_iso_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->iso_code(), target);
  }

  // optional string symbol = 30;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Currency::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float value = 10;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // required .com.telenav.proto.CurrencyCode iso_code = 20;
    if (has_iso_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->iso_code());
    }

    // optional string symbol = 30;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Currency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Currency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Currency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Currency::MergeFrom(const Currency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_iso_code()) {
      set_iso_code(from.iso_code());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Currency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Currency::CopyFrom(const Currency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Currency::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Currency::Swap(Currency* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(iso_code_, other->iso_code_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Currency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Currency_descriptor_;
  metadata.reflection = Currency_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameValuePair::kNameFieldNumber;
const int NameValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

NameValuePair::NameValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameValuePair::InitAsDefaultInstance() {
}

NameValuePair::NameValuePair(const NameValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameValuePair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameValuePair::~NameValuePair() {
  SharedDtor();
}

void NameValuePair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void NameValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameValuePair_descriptor_;
}

const NameValuePair& NameValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NameValuePair* NameValuePair::default_instance_ = NULL;

NameValuePair* NameValuePair::New() const {
  return new NameValuePair;
}

void NameValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_value;
        break;
      }

      // required string value = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // required string value = 20;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // required string value = 20;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 20;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameValuePair::MergeFrom(const NameValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameValuePair::CopyFrom(const NameValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameValuePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NameValuePair::Swap(NameValuePair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameValuePair_descriptor_;
  metadata.reflection = NameValuePair_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace telenav
}  // namespace com

// @@protoc_insertion_point(global_scope)
